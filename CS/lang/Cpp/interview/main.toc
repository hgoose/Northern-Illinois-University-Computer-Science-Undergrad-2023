\contentsline {section}{\numberline {1}The different interview processes}{2}{section.0.1}%
\contentsline {subsection}{\numberline {1.1}The big tech style interview process}{2}{subsection.0.1.1}%
\contentsline {subsection}{\numberline {1.2}The shorter interview process}{3}{subsection.0.1.2}%
\contentsline {section}{\numberline {2}Background}{4}{section.0.2}%
\contentsline {subsection}{\numberline {2.1}Rvalue references}{4}{subsection.0.2.1}%
\contentsline {subsection}{\numberline {2.2}Universal References (T\&\& in templates)}{4}{subsection.0.2.2}%
\contentsline {subsection}{\numberline {2.3}Perfect forwarding}{5}{subsection.0.2.3}%
\contentsline {subsubsection}{\numberline {2.3.1}The Problem Without Perfect Forwarding}{5}{subsubsection.0.2.3.1}%
\contentsline {subsubsection}{\numberline {2.3.2} Perfect Forwarding with std::forward}{5}{subsubsection.0.2.3.2}%
\contentsline {subsection}{\numberline {2.4}Exception safety: four types}{6}{subsection.0.2.4}%
\contentsline {subsection}{\numberline {2.5}Resource Acquisition Is Initialization (RAII)}{7}{subsection.0.2.5}%
\contentsline {subsection}{\numberline {2.6}The partition of memory}{8}{subsection.0.2.6}%
\contentsline {subsubsection}{\numberline {2.6.1}Text segment (code segment)}{8}{subsubsection.0.2.6.1}%
\contentsline {subsubsection}{\numberline {2.6.2}Data Segment}{9}{subsubsection.0.2.6.2}%
\contentsline {subsubsection}{\numberline {2.6.3}Stack}{9}{subsubsection.0.2.6.3}%
\contentsline {subsubsection}{\numberline {2.6.4}Heap}{10}{subsubsection.0.2.6.4}%
\contentsline {subsubsection}{\numberline {2.6.5}The free list}{10}{subsubsection.0.2.6.5}%
\contentsline {subsubsection}{\numberline {2.6.6}Memory fragmentation}{10}{subsubsection.0.2.6.6}%
\contentsline {subsubsection}{\numberline {2.6.7}A programs execution}{11}{subsubsection.0.2.6.7}%
\contentsline {subsubsection}{\numberline {2.6.8}What does it mean for memory to be "allocated"}{12}{subsubsection.0.2.6.8}%
\contentsline {subsubsection}{\numberline {2.6.9}"Static allocation"}{12}{subsubsection.0.2.6.9}%
\contentsline {subsubsection}{\numberline {2.6.10}"Automatic allocation"}{13}{subsubsection.0.2.6.10}%
\contentsline {subsubsection}{\numberline {2.6.11}"Dynamic allocation"}{14}{subsubsection.0.2.6.11}%
\contentsline {subsubsection}{\numberline {2.6.12}Stack vs heap allocation}{14}{subsubsection.0.2.6.12}%
\contentsline {subsubsection}{\numberline {2.6.13}Why new (dynamic allocation) is slow and stack allocation is fast}{14}{subsubsection.0.2.6.13}%
\contentsline {subsubsection}{\numberline {2.6.14}Does new call malloc?}{15}{subsubsection.0.2.6.14}%
\contentsline {subsubsection}{\numberline {2.6.15}Delete}{15}{subsubsection.0.2.6.15}%
\contentsline {subsubsection}{\numberline {2.6.16}How does delete know how many bytes to relinquish?}{15}{subsubsection.0.2.6.16}%
\contentsline {subsubsection}{\numberline {2.6.17}Dangling pointer, memory leak, and resource leak}{16}{subsubsection.0.2.6.17}%
\contentsline {subsection}{\numberline {2.7}New in detail}{16}{subsection.0.2.7}%
\contentsline {subsubsection}{\numberline {2.7.1}Behind the scenes}{16}{subsubsection.0.2.7.1}%
\contentsline {subsubsection}{\numberline {2.7.2}operator new}{17}{subsubsection.0.2.7.2}%
\contentsline {subsubsection}{\numberline {2.7.3}placement new}{17}{subsubsection.0.2.7.3}%
\contentsline {subsubsection}{\numberline {2.7.4}nothrow new}{17}{subsubsection.0.2.7.4}%
\contentsline {section}{\numberline {3}Categories}{18}{section.0.3}%
\contentsline {section}{\numberline {4}Auto and type deduction}{19}{section.0.4}%
\contentsline {subsection}{\numberline {4.1}Auto with const}{19}{subsection.0.4.1}%
\contentsline {subsection}{\numberline {4.2}Const with auto and references}{20}{subsection.0.4.2}%
\contentsline {subsection}{\numberline {4.3}Const with auto and pointers}{20}{subsection.0.4.3}%
\contentsline {subsection}{\numberline {4.4}rvalue references with auto}{21}{subsection.0.4.4}%
\contentsline {subsection}{\numberline {4.5}Auto in function return types or lambda parameters}{21}{subsection.0.4.5}%
\contentsline {subsection}{\numberline {4.6}When can auto deduce undesired types?}{21}{subsection.0.4.6}%
\contentsline {subsection}{\numberline {4.7}What is the type of a lambda?}{23}{subsection.0.4.7}%
\contentsline {subsection}{\numberline {4.8}What are the advantages of using auto?}{24}{subsection.0.4.8}%
\contentsline {subsubsection}{\numberline {4.8.1}Regarding local variables}{24}{subsubsection.0.4.8.1}%
\contentsline {subsubsection}{\numberline {4.8.2}Correctness}{25}{subsubsection.0.4.8.2}%
\contentsline {subsubsection}{\numberline {4.8.3}Performance}{25}{subsubsection.0.4.8.3}%
\contentsline {subsubsection}{\numberline {4.8.4}Maintainability}{25}{subsubsection.0.4.8.4}%
\contentsline {subsubsection}{\numberline {4.8.5}Robustness}{25}{subsubsection.0.4.8.5}%
\contentsline {subsection}{\numberline {4.9}Intializer\_lists}{26}{subsection.0.4.9}%
\contentsline {subsection}{\numberline {4.10}decltype}{27}{subsection.0.4.10}%
\contentsline {subsection}{\numberline {4.11}Decltype vs auto}{27}{subsection.0.4.11}%
\contentsline {subsection}{\numberline {4.12}decltype(auto)}{28}{subsection.0.4.12}%
\contentsline {section}{\numberline {5}Keyword static and its different uses }{29}{section.0.5}%
\contentsline {subsection}{\numberline {5.1}What does a static member variable in C++ mean?}{29}{subsection.0.5.1}%
\contentsline {subsection}{\numberline {5.2}What does a static member function mean in C++?}{29}{subsection.0.5.2}%
\contentsline {subsection}{\numberline {5.3}What is the static initialization order fiasco?}{30}{subsection.0.5.3}%
\contentsline {subsection}{\numberline {5.4}How to solve the static initialization order fiasco?}{31}{subsection.0.5.4}%
\contentsline {section}{\numberline {6}Polymorphism, inheritance and virtual functions}{33}{section.0.6}%
\contentsline {subsection}{\numberline {6.1}Rules for virtual functions}{33}{subsection.0.6.1}%
\contentsline {subsection}{\numberline {6.2}The diamond problem and its solution}{34}{subsection.0.6.2}%
\contentsline {subsection}{\numberline {6.3}Should we always use virtual inheritance? If yes, why? If not, why not?}{35}{subsection.0.6.3}%
\contentsline {subsubsection}{\numberline {6.3.1}Issues with Type Conversions}{37}{subsubsection.0.6.3.1}%
\contentsline {subsection}{\numberline {6.4}Non public inheritance}{38}{subsection.0.6.4}%
\contentsline {subsection}{\numberline {6.5}Can we inherit from a standard container (such as std::vector)? If so what are the implications?}{38}{subsection.0.6.5}%
\contentsline {subsection}{\numberline {6.6}What is a destructor and how can we overload it?}{39}{subsection.0.6.6}%
\contentsline {section}{\numberline {7}Lambdas}{40}{section.0.7}%
\contentsline {subsection}{\numberline {7.1}When could IILF's (Immediately invoked lambda functions) be useful.}{40}{subsection.0.7.1}%
\contentsline {subsection}{\numberline {7.2}What kind of captures are available for lambda expressions?}{40}{subsection.0.7.2}%
\contentsline {subsubsection}{\numberline {7.2.1}The following types of captures are available:}{40}{subsubsection.0.7.2.1}%
\contentsline {section}{\numberline {8}How to use the const qualifier in C++}{42}{section.0.8}%
\contentsline {subsection}{\numberline {8.1}What are the advantages of using const local variables?}{42}{subsection.0.8.1}%
\contentsline {subsection}{\numberline {8.2}What happens when a class has const member variables?}{42}{subsection.0.8.2}%
\contentsline {subsection}{\numberline {8.3}Should you take plain old data types by const reference as a function parameter?}{43}{subsection.0.8.3}%
\contentsline {section}{\numberline {9}Best practices in modern C++}{45}{section.0.9}%
\contentsline {subsection}{\numberline {9.1}What are explicit constructors and what are their advantages?}{45}{subsection.0.9.1}%
\contentsline {subsection}{\numberline {9.2}What are user-defined literals?}{45}{subsection.0.9.2}%
\contentsline {subsection}{\numberline {9.3}Why should we use nullptr instead of NULL or 0?}{46}{subsection.0.9.3}%
\contentsline {subsection}{\numberline {9.4}What advantages does alias have over typedef?}{46}{subsection.0.9.4}%
\contentsline {subsection}{\numberline {9.5}Should you explicitly delete unused/unsupported special functions or declare them as private?}{46}{subsection.0.9.5}%
\contentsline {subsection}{\numberline {9.6} What is a trivial class in C++?}{47}{subsection.0.9.6}%
\contentsline {section}{\numberline {10}Smart pointers}{48}{section.0.10}%
\contentsline {subsection}{\numberline {10.1}RAII}{48}{subsection.0.10.1}%
\contentsline {subsection}{\numberline {10.2}When should we use unique pointers?}{49}{subsection.0.10.2}%
\contentsline {subsection}{\numberline {10.3}What are the reasons to use shared pointers?}{50}{subsection.0.10.3}%
\contentsline {subsection}{\numberline {10.4}When to use a weak pointer?}{51}{subsection.0.10.4}%
\contentsline {subsection}{\numberline {10.5}What are the advantages of std::make\_shared and std::make\_unique compared to the new operator?}{51}{subsection.0.10.5}%
\contentsline {subsection}{\numberline {10.6}Should you use smart pointers over raw pointers all the time?}{52}{subsection.0.10.6}%
\contentsline {section}{\numberline {11}References, universal references, a bit of a mixture}{53}{section.0.11}%
\contentsline {subsection}{\numberline {11.1} What does std::move move?}{53}{subsection.0.11.1}%
\contentsline {subsection}{\numberline {11.2}What does std::forward forward?}{53}{subsection.0.11.2}%
\contentsline {subsection}{\numberline {11.3}What is the difference between universal and rvalue references?}{53}{subsection.0.11.3}%
\contentsline {subsection}{\numberline {11.4}What is reference collapsing?}{54}{subsection.0.11.4}%
\contentsline {subsection}{\numberline {11.5}When constexpr functions are evaluated?}{55}{subsection.0.11.5}%
\contentsline {subsection}{\numberline {11.6}When should you declare your functions as noexcept?}{55}{subsection.0.11.6}%
\contentsline {section}{\numberline {12}C++20}{56}{section.0.12}%
\contentsline {subsection}{\numberline {12.1}What are concepts}{56}{subsection.0.12.1}%
\contentsline {subsubsection}{\numberline {12.1.1}Constrained Template Parameter List}{57}{subsubsection.0.12.1.1}%
\contentsline {subsubsection}{\numberline {12.1.2}Requires Clause (Pre-Declaration)}{57}{subsubsection.0.12.1.2}%
\contentsline {subsubsection}{\numberline {12.1.3} Abbreviated Function Template Syntax}{57}{subsubsection.0.12.1.3}%
\contentsline {subsubsection}{\numberline {12.1.4}Trailing Requires Clause}{57}{subsubsection.0.12.1.4}%
\contentsline {subsection}{\numberline {12.2}What are the available standard attributes in C++?}{57}{subsection.0.12.2}%
\contentsline {subsection}{\numberline {12.3}What is 3-way comparison?}{58}{subsection.0.12.3}%
\contentsline {subsection}{\numberline {12.4}What are modules and what advantages do they bring?}{58}{subsection.0.12.4}%
\contentsline {section}{\numberline {13}Special function and the rules of how many?}{60}{section.0.13}%
\contentsline {subsection}{\numberline {13.1}Explain the rule of three}{60}{subsection.0.13.1}%
\contentsline {subsection}{\numberline {13.2}Explain the rule of five}{60}{subsection.0.13.2}%
\contentsline {subsection}{\numberline {13.3}Explain the rule of zero}{61}{subsection.0.13.3}%
\contentsline {subsection}{\numberline {13.4}What advantages does having a default constructor have?}{61}{subsection.0.13.4}%
\contentsline {section}{\numberline {14}Object oriented design, inheritance, polymorphism}{62}{section.0.14}%
\contentsline {subsection}{\numberline {14.1}Distinguish between shallow copy and deep copy}{62}{subsection.0.14.1}%
\contentsline {subsection}{\numberline {14.2}What does dynamic dispatch mean?}{62}{subsection.0.14.2}%
\contentsline {subsection}{\numberline {14.3}What is an abstract class in C++?}{62}{subsection.0.14.3}%
\contentsline {subsection}{\numberline {14.4}Is it possible to have polymorphic behaviour without the cost of virtual functions?}{62}{subsection.0.14.4}%
\contentsline {section}{\numberline {15}Observable behaviours}{63}{section.0.15}%
\contentsline {subsection}{\numberline {15.1}What is observable behaviour of code?}{63}{subsection.0.15.1}%
\contentsline {subsection}{\numberline {15.2}What are the characteristics of an ill-formed C++ program?}{63}{subsection.0.15.2}%
\contentsline {subsubsection}{\numberline {15.2.1}ill-formed}{63}{subsubsection.0.15.2.1}%
\contentsline {subsubsection}{\numberline {15.2.2}ill-formed, no diagnostic required}{64}{subsubsection.0.15.2.2}%
\contentsline {subsection}{\numberline {15.3}What is unspecified behaviour?}{64}{subsection.0.15.3}%
\contentsline {subsection}{\numberline {15.4}What is implementation-defined behaviour?}{64}{subsection.0.15.4}%
\contentsline {subsection}{\numberline {15.5}What is undefined behaviour in C++?}{65}{subsection.0.15.5}%
\contentsline {subsection}{\numberline {15.6}What are the reasons behind undefined behaviour’s existence?}{65}{subsection.0.15.6}%
\contentsline {subsection}{\numberline {15.7}What approaches to take to avoid undefined behaviour?}{66}{subsection.0.15.7}%
\contentsline {subsection}{\numberline {15.8}What doesn't cause iterator invalidation? }{66}{subsection.0.15.8}%
\contentsline {section}{\numberline {16}The Standard Template Library}{67}{section.0.16}%
\contentsline {subsection}{\numberline {16.1}What is the STL?}{67}{subsection.0.16.1}%
\contentsline {subsection}{\numberline {16.2}What are the advantages of algorithms over raw loops?}{67}{subsection.0.16.2}%
\contentsline {subsection}{\numberline {16.3}Do algorithms validate ranges?}{68}{subsection.0.16.3}%
\contentsline {subsection}{\numberline {16.4}Can you combine containers of different sizes?}{68}{subsection.0.16.4}%
\contentsline {section}{\numberline {17}Miscellaneous}{69}{section.0.17}%
\contentsline {subsection}{\numberline {17.1}Can you call a virtual function from a constructor or a destructor?}{69}{subsection.0.17.1}%
\contentsline {subsection}{\numberline {17.2}What is the function of the keyword mutable?}{69}{subsection.0.17.2}%
\contentsline {subsection}{\numberline {17.3}Mutable lambda expressions}{70}{subsection.0.17.3}%
\contentsline {subsection}{\numberline {17.4}What is the function of the keyword volatile?}{70}{subsection.0.17.4}%
\contentsline {subsection}{\numberline {17.5}What is RVO}{70}{subsection.0.17.5}%
\contentsline {subsection}{\numberline {17.6}How can we ensure the compiler performs RVO?}{71}{subsection.0.17.6}%
\contentsline {subsection}{\numberline {17.7}What is NRVO and when can it happen?}{71}{subsection.0.17.7}%
