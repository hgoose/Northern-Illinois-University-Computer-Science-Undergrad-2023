\contentsline {section}{\numberline {1}The different interview processes}{5}{section.0.1}%
\contentsline {subsection}{\numberline {1.1}The big tech style interview process}{5}{subsection.0.1.1}%
\contentsline {subsection}{\numberline {1.2}The shorter interview process}{6}{subsection.0.1.2}%
\contentsline {section}{\numberline {2}Background}{7}{section.0.2}%
\contentsline {subsection}{\numberline {2.1}Rvalue references}{7}{subsection.0.2.1}%
\contentsline {subsection}{\numberline {2.2}Universal References (T\&\& in templates)}{7}{subsection.0.2.2}%
\contentsline {subsection}{\numberline {2.3}Perfect forwarding}{8}{subsection.0.2.3}%
\contentsline {subsubsection}{\numberline {2.3.1}The Problem Without Perfect Forwarding}{8}{subsubsection.0.2.3.1}%
\contentsline {subsubsection}{\numberline {2.3.2} Perfect Forwarding with std::forward}{8}{subsubsection.0.2.3.2}%
\contentsline {subsection}{\numberline {2.4}Exception safety: four types}{9}{subsection.0.2.4}%
\contentsline {subsection}{\numberline {2.5}Resource Acquisition Is Initialization (RAII)}{10}{subsection.0.2.5}%
\contentsline {subsection}{\numberline {2.6}The partition of memory}{11}{subsection.0.2.6}%
\contentsline {subsubsection}{\numberline {2.6.1}Text segment (code segment)}{11}{subsubsection.0.2.6.1}%
\contentsline {subsubsection}{\numberline {2.6.2}Data Segment}{12}{subsubsection.0.2.6.2}%
\contentsline {subsubsection}{\numberline {2.6.3}Stack}{12}{subsubsection.0.2.6.3}%
\contentsline {subsubsection}{\numberline {2.6.4}Heap}{13}{subsubsection.0.2.6.4}%
\contentsline {subsubsection}{\numberline {2.6.5}The free list}{13}{subsubsection.0.2.6.5}%
\contentsline {subsubsection}{\numberline {2.6.6}Memory fragmentation}{13}{subsubsection.0.2.6.6}%
\contentsline {subsubsection}{\numberline {2.6.7}A programs execution}{14}{subsubsection.0.2.6.7}%
\contentsline {subsubsection}{\numberline {2.6.8}What does it mean for memory to be "allocated"}{15}{subsubsection.0.2.6.8}%
\contentsline {subsubsection}{\numberline {2.6.9}"Static allocation"}{15}{subsubsection.0.2.6.9}%
\contentsline {subsubsection}{\numberline {2.6.10}"Automatic allocation"}{16}{subsubsection.0.2.6.10}%
\contentsline {subsubsection}{\numberline {2.6.11}"Dynamic allocation"}{17}{subsubsection.0.2.6.11}%
\contentsline {subsubsection}{\numberline {2.6.12}Stack vs heap allocation}{17}{subsubsection.0.2.6.12}%
\contentsline {subsubsection}{\numberline {2.6.13}Why new (dynamic allocation) is slow and stack allocation is fast}{17}{subsubsection.0.2.6.13}%
\contentsline {subsubsection}{\numberline {2.6.14}Does new call malloc?}{18}{subsubsection.0.2.6.14}%
\contentsline {subsubsection}{\numberline {2.6.15}Delete}{18}{subsubsection.0.2.6.15}%
\contentsline {subsubsection}{\numberline {2.6.16}How does delete know how many bytes to relinquish?}{18}{subsubsection.0.2.6.16}%
\contentsline {subsubsection}{\numberline {2.6.17}Dangling pointer, memory leak, and resource leak}{19}{subsubsection.0.2.6.17}%
\contentsline {subsection}{\numberline {2.7}New in detail}{19}{subsection.0.2.7}%
\contentsline {subsubsection}{\numberline {2.7.1}Behind the scenes}{19}{subsubsection.0.2.7.1}%
\contentsline {subsubsection}{\numberline {2.7.2}operator new}{20}{subsubsection.0.2.7.2}%
\contentsline {subsubsection}{\numberline {2.7.3}placement new}{20}{subsubsection.0.2.7.3}%
\contentsline {subsubsection}{\numberline {2.7.4}nothrow new}{20}{subsubsection.0.2.7.4}%
\contentsline {section}{\numberline {3}Categories}{21}{section.0.3}%
\contentsline {section}{\numberline {4}Auto and type deduction}{22}{section.0.4}%
\contentsline {subsection}{\numberline {4.1}Auto with const}{22}{subsection.0.4.1}%
\contentsline {subsection}{\numberline {4.2}Const with auto and references}{23}{subsection.0.4.2}%
\contentsline {subsection}{\numberline {4.3}Const with auto and pointers}{23}{subsection.0.4.3}%
\contentsline {subsection}{\numberline {4.4}rvalue references with auto}{24}{subsection.0.4.4}%
\contentsline {subsection}{\numberline {4.5}Auto in function return types or lambda parameters}{24}{subsection.0.4.5}%
\contentsline {subsection}{\numberline {4.6}When can auto deduce undesired types?}{24}{subsection.0.4.6}%
\contentsline {subsection}{\numberline {4.7}What is the type of a lambda?}{26}{subsection.0.4.7}%
\contentsline {subsection}{\numberline {4.8}What are the advantages of using auto?}{27}{subsection.0.4.8}%
\contentsline {subsubsection}{\numberline {4.8.1}Regarding local variables}{27}{subsubsection.0.4.8.1}%
\contentsline {subsubsection}{\numberline {4.8.2}Correctness}{28}{subsubsection.0.4.8.2}%
\contentsline {subsubsection}{\numberline {4.8.3}Performance}{28}{subsubsection.0.4.8.3}%
\contentsline {subsubsection}{\numberline {4.8.4}Maintainability}{28}{subsubsection.0.4.8.4}%
\contentsline {subsubsection}{\numberline {4.8.5}Robustness}{28}{subsubsection.0.4.8.5}%
\contentsline {subsection}{\numberline {4.9}Intializer\_lists}{29}{subsection.0.4.9}%
\contentsline {subsection}{\numberline {4.10}decltype}{30}{subsection.0.4.10}%
\contentsline {subsection}{\numberline {4.11}Decltype vs auto}{30}{subsection.0.4.11}%
\contentsline {subsection}{\numberline {4.12}decltype(auto)}{31}{subsection.0.4.12}%
\contentsline {section}{\numberline {5}Keyword static and its different uses }{32}{section.0.5}%
\contentsline {subsection}{\numberline {5.1}What does a static member variable in C++ mean?}{32}{subsection.0.5.1}%
\contentsline {subsection}{\numberline {5.2}What does a static member function mean in C++?}{32}{subsection.0.5.2}%
\contentsline {subsection}{\numberline {5.3}What is the static initialization order fiasco?}{33}{subsection.0.5.3}%
\contentsline {subsection}{\numberline {5.4}How to solve the static initialization order fiasco?}{34}{subsection.0.5.4}%
\contentsline {section}{\numberline {6}Polymorphism, inheritance and virtual functions}{36}{section.0.6}%
\contentsline {subsection}{\numberline {6.1}Rules for virtual functions}{36}{subsection.0.6.1}%
\contentsline {subsection}{\numberline {6.2}The diamond problem and its solution}{37}{subsection.0.6.2}%
\contentsline {subsection}{\numberline {6.3}Should we always use virtual inheritance? If yes, why? If not, why not?}{38}{subsection.0.6.3}%
\contentsline {subsubsection}{\numberline {6.3.1}Issues with Type Conversions}{40}{subsubsection.0.6.3.1}%
\contentsline {subsection}{\numberline {6.4}Non public inheritance}{41}{subsection.0.6.4}%
\contentsline {subsection}{\numberline {6.5}Can we inherit from a standard container (such as std::vector)? If so what are the implications?}{41}{subsection.0.6.5}%
\contentsline {subsection}{\numberline {6.6}What is a destructor and how can we overload it?}{42}{subsection.0.6.6}%
\contentsline {section}{\numberline {7}Lambdas}{43}{section.0.7}%
\contentsline {subsection}{\numberline {7.1}When could IILF's (Immediately invoked lambda functions) be useful.}{43}{subsection.0.7.1}%
\contentsline {subsection}{\numberline {7.2}What kind of captures are available for lambda expressions?}{43}{subsection.0.7.2}%
\contentsline {subsubsection}{\numberline {7.2.1}The following types of captures are available:}{43}{subsubsection.0.7.2.1}%
\contentsline {section}{\numberline {8}How to use the const qualifier in C++}{45}{section.0.8}%
\contentsline {subsection}{\numberline {8.1}What are the advantages of using const local variables?}{45}{subsection.0.8.1}%
\contentsline {subsection}{\numberline {8.2}What happens when a class has const member variables?}{45}{subsection.0.8.2}%
\contentsline {subsection}{\numberline {8.3}Should you take plain old data types by const reference as a function parameter?}{46}{subsection.0.8.3}%
\contentsline {section}{\numberline {9}Best practices in modern C++}{48}{section.0.9}%
\contentsline {subsection}{\numberline {9.1}What are explicit constructors and what are their advantages?}{48}{subsection.0.9.1}%
\contentsline {subsection}{\numberline {9.2}What are user-defined literals?}{48}{subsection.0.9.2}%
\contentsline {subsection}{\numberline {9.3}Why should we use nullptr instead of NULL or 0?}{49}{subsection.0.9.3}%
\contentsline {subsection}{\numberline {9.4}What advantages does alias have over typedef?}{49}{subsection.0.9.4}%
\contentsline {subsection}{\numberline {9.5}Should you explicitly delete unused/unsupported special functions or declare them as private?}{49}{subsection.0.9.5}%
\contentsline {subsection}{\numberline {9.6} What is a trivial class in C++?}{50}{subsection.0.9.6}%
\contentsline {section}{\numberline {10}Smart pointers}{51}{section.0.10}%
\contentsline {subsection}{\numberline {10.1}RAII}{51}{subsection.0.10.1}%
\contentsline {subsection}{\numberline {10.2}When should we use unique pointers?}{52}{subsection.0.10.2}%
\contentsline {subsection}{\numberline {10.3}What are the reasons to use shared pointers?}{53}{subsection.0.10.3}%
\contentsline {subsection}{\numberline {10.4}When to use a weak pointer?}{54}{subsection.0.10.4}%
\contentsline {subsection}{\numberline {10.5}What are the advantages of std::make\_shared and std::make\_unique compared to the new operator?}{54}{subsection.0.10.5}%
\contentsline {subsection}{\numberline {10.6}Should you use smart pointers over raw pointers all the time?}{55}{subsection.0.10.6}%
\contentsline {section}{\numberline {11}References, universal references, a bit of a mixture}{56}{section.0.11}%
\contentsline {subsection}{\numberline {11.1} What does std::move move?}{56}{subsection.0.11.1}%
\contentsline {subsection}{\numberline {11.2}What does std::forward forward?}{56}{subsection.0.11.2}%
\contentsline {subsection}{\numberline {11.3}What is the difference between universal and rvalue references?}{56}{subsection.0.11.3}%
\contentsline {subsection}{\numberline {11.4}What is reference collapsing?}{57}{subsection.0.11.4}%
\contentsline {subsection}{\numberline {11.5}When constexpr functions are evaluated?}{58}{subsection.0.11.5}%
\contentsline {subsection}{\numberline {11.6}When should you declare your functions as noexcept?}{58}{subsection.0.11.6}%
\contentsline {section}{\numberline {12}C++20}{59}{section.0.12}%
\contentsline {subsection}{\numberline {12.1}What are concepts}{59}{subsection.0.12.1}%
\contentsline {subsubsection}{\numberline {12.1.1}Constrained Template Parameter List}{60}{subsubsection.0.12.1.1}%
\contentsline {subsubsection}{\numberline {12.1.2}Requires Clause (Pre-Declaration)}{60}{subsubsection.0.12.1.2}%
\contentsline {subsubsection}{\numberline {12.1.3} Abbreviated Function Template Syntax}{60}{subsubsection.0.12.1.3}%
\contentsline {subsubsection}{\numberline {12.1.4}Trailing Requires Clause}{60}{subsubsection.0.12.1.4}%
\contentsline {subsection}{\numberline {12.2}What are the available standard attributes in C++?}{60}{subsection.0.12.2}%
\contentsline {subsection}{\numberline {12.3}What is 3-way comparison?}{61}{subsection.0.12.3}%
\contentsline {subsection}{\numberline {12.4}What are modules and what advantages do they bring?}{61}{subsection.0.12.4}%
\contentsline {section}{\numberline {13}Special function and the rules of how many?}{63}{section.0.13}%
\contentsline {subsection}{\numberline {13.1}Explain the rule of three}{63}{subsection.0.13.1}%
\contentsline {subsection}{\numberline {13.2}Explain the rule of five}{63}{subsection.0.13.2}%
\contentsline {subsection}{\numberline {13.3}Explain the rule of zero}{64}{subsection.0.13.3}%
