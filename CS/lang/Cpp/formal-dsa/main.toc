\contentsline {section}{\numberline {1}Preface}{12}{section.0.1}%
\contentsline {subsection}{\numberline {1.1}Universe}{12}{subsection.0.1.1}%
\contentsline {subsection}{\numberline {1.2}Dynamic and static sets}{12}{subsection.0.1.2}%
\contentsline {section}{\numberline {2}Elementary complexity theory}{13}{section.0.2}%
\contentsline {section}{\numberline {3}Binary search}{20}{section.0.3}%
\contentsline {subsection}{\numberline {3.1}Avoiding overflow with suitable mid calculations}{20}{subsection.0.3.1}%
\contentsline {subsection}{\numberline {3.2}The while(left < right), left = mid+1, right = mid pattern}{20}{subsection.0.3.2}%
\contentsline {subsubsection}{\numberline {3.2.1}First bad version}{21}{subsubsection.0.3.2.1}%
\contentsline {subsubsection}{\numberline {3.2.2}The almost equivalent form}{22}{subsubsection.0.3.2.2}%
\contentsline {subsection}{\numberline {3.3}Search Insert Position}{22}{subsection.0.3.3}%
\contentsline {subsection}{\numberline {3.4}Binary search on two arrays}{24}{subsection.0.3.4}%
\contentsline {subsubsection}{\numberline {3.4.1}Minimum common value}{24}{subsubsection.0.3.4.1}%
\contentsline {subsection}{\numberline {3.5}Advanced application}{25}{subsection.0.3.5}%
\contentsline {section}{\numberline {4}Sliding window}{26}{section.0.4}%
\contentsline {subsection}{\numberline {4.1}Types of Sliding Window Problems}{26}{subsection.0.4.1}%
\contentsline {subsection}{\numberline {4.2}Minimum Recolors to Get K Consecutive Black Blocks}{26}{subsection.0.4.2}%
\contentsline {section}{\numberline {5}Linked lists}{28}{section.0.5}%
\contentsline {subsection}{\numberline {5.1}Singly-linked lists}{28}{subsection.0.5.1}%
\contentsline {subsubsection}{\numberline {5.1.1}Structure of the node}{28}{subsubsection.0.5.1.1}%
\contentsline {subsubsection}{\numberline {5.1.2}The list class/struct}{29}{subsubsection.0.5.1.2}%
\contentsline {subsubsection}{\numberline {5.1.3}Interface of a singly linked list stack}{29}{subsubsection.0.5.1.3}%
\contentsline {subsubsection}{\numberline {5.1.4}Traversing}{30}{subsubsection.0.5.1.4}%
\contentsline {subsubsection}{\numberline {5.1.5}Printing}{31}{subsubsection.0.5.1.5}%
\contentsline {subsubsection}{\numberline {5.1.6}Printing in reverse}{32}{subsubsection.0.5.1.6}%
\contentsline {subsubsection}{\numberline {5.1.7}Getting the length}{33}{subsubsection.0.5.1.7}%
\contentsline {subsubsection}{\numberline {5.1.8}Clearing}{34}{subsubsection.0.5.1.8}%
\contentsline {subsubsection}{\numberline {5.1.9}Reversing}{35}{subsubsection.0.5.1.9}%
\contentsline {subsubsection}{\numberline {5.1.10}Pushing}{36}{subsubsection.0.5.1.10}%
\contentsline {subsubsection}{\numberline {5.1.11}Inserting}{37}{subsubsection.0.5.1.11}%
\contentsline {subsubsection}{\numberline {5.1.12}Popping}{38}{subsubsection.0.5.1.12}%
\contentsline {subsubsection}{\numberline {5.1.13}Erasing}{39}{subsubsection.0.5.1.13}%
\contentsline {subsubsection}{\numberline {5.1.14}Searching}{40}{subsubsection.0.5.1.14}%
\contentsline {subsection}{\numberline {5.2}Doubly-linked list}{41}{subsection.0.5.2}%
\contentsline {subsubsection}{\numberline {5.2.1}Node structure}{41}{subsubsection.0.5.2.1}%
\contentsline {subsubsection}{\numberline {5.2.2}The list class}{41}{subsubsection.0.5.2.2}%
\contentsline {subsubsection}{\numberline {5.2.3}push\_back and push\_front}{42}{subsubsection.0.5.2.3}%
\contentsline {subsubsection}{\numberline {5.2.4}pop\_back and pop\_frot}{43}{subsubsection.0.5.2.4}%
\contentsline {subsubsection}{\numberline {5.2.5}Searching}{44}{subsubsection.0.5.2.5}%
\contentsline {section}{\numberline {6}Monotonic stack}{45}{section.0.6}%
\contentsline {subsection}{\numberline {6.1}Next greater element}{45}{subsection.0.6.1}%
\contentsline {subsection}{\numberline {6.2}Next smaller element}{46}{subsection.0.6.2}%
\contentsline {section}{\numberline {7}Recursion}{47}{section.0.7}%
\contentsline {subsection}{\numberline {7.1}Recursion vs iteration}{47}{subsection.0.7.1}%
\contentsline {subsection}{\numberline {7.2}Elementary recursion}{48}{subsection.0.7.2}%
\contentsline {subsection}{\numberline {7.3}Base cases}{48}{subsection.0.7.3}%
\contentsline {subsubsection}{\numberline {7.3.1}Factorials}{48}{subsubsection.0.7.3.1}%
\contentsline {subsubsection}{\numberline {7.3.2}Powers}{49}{subsubsection.0.7.3.2}%
\contentsline {subsection}{\numberline {7.4}Tail recursion}{50}{subsection.0.7.4}%
\contentsline {subsection}{\numberline {7.5}Indirect Recursion}{52}{subsection.0.7.5}%
\contentsline {subsection}{\numberline {7.6}Nested Recursion}{53}{subsection.0.7.6}%
\contentsline {subsection}{\numberline {7.7}Excessive Recursion}{53}{subsection.0.7.7}%
\contentsline {subsection}{\numberline {7.8}Backtracking}{55}{subsection.0.7.8}%
\contentsline {subsubsection}{\numberline {7.8.1}N-Queens}{56}{subsubsection.0.7.8.1}%
\contentsline {subsubsection}{\numberline {7.8.2}Greedy backtracking: Traveling salesman problem (TSP)}{57}{subsubsection.0.7.8.2}%
\contentsline {subsubsection}{\numberline {7.8.3}Combinations}{61}{subsubsection.0.7.8.3}%
\contentsline {subsubsection}{\numberline {7.8.4}Combinations that sum to $m$}{62}{subsubsection.0.7.8.4}%
\contentsline {subsubsection}{\numberline {7.8.5}Permutations}{63}{subsubsection.0.7.8.5}%
\contentsline {subsection}{\numberline {7.9}Recursion in singly linked lists}{64}{subsection.0.7.9}%
\contentsline {subsubsection}{\numberline {7.9.1}Traversing}{64}{subsubsection.0.7.9.1}%
\contentsline {subsubsection}{\numberline {7.9.2}Printing}{64}{subsubsection.0.7.9.2}%
\contentsline {subsubsection}{\numberline {7.9.3}Printing in reverse}{64}{subsubsection.0.7.9.3}%
\contentsline {subsubsection}{\numberline {7.9.4}Getting the length}{65}{subsubsection.0.7.9.4}%
\contentsline {subsubsection}{\numberline {7.9.5}Clearing}{65}{subsubsection.0.7.9.5}%
\contentsline {subsubsection}{\numberline {7.9.6}Reversing}{66}{subsubsection.0.7.9.6}%
\contentsline {subsubsection}{\numberline {7.9.7}Pushing}{68}{subsubsection.0.7.9.7}%
\contentsline {subsubsection}{\numberline {7.9.8}Inserting}{69}{subsubsection.0.7.9.8}%
\contentsline {subsubsection}{\numberline {7.9.9}Popping}{70}{subsubsection.0.7.9.9}%
\contentsline {subsubsection}{\numberline {7.9.10}Erasing}{71}{subsubsection.0.7.9.10}%
\contentsline {subsubsection}{\numberline {7.9.11}Searching}{72}{subsubsection.0.7.9.11}%
\contentsline {section}{\numberline {8}More on backtracking}{73}{section.0.8}%
\contentsline {subsection}{\numberline {8.1}(Power set) Subsets}{73}{subsection.0.8.1}%
\contentsline {subsection}{\numberline {8.2}Power set with duplicates}{74}{subsection.0.8.2}%
\contentsline {subsection}{\numberline {8.3}Generate permutations (Without swaps)}{75}{subsection.0.8.3}%
\contentsline {subsection}{\numberline {8.4}Permutations with repetition}{76}{subsection.0.8.4}%
\contentsline {subsection}{\numberline {8.5}Combinations with repetitions}{77}{subsection.0.8.5}%
\contentsline {subsection}{\numberline {8.6}Backtracking with pruning}{78}{subsection.0.8.6}%
\contentsline {section}{\numberline {9}The basics of Dynamic Programming (DP)}{79}{section.0.9}%
\contentsline {subsection}{\numberline {9.1}Key Concepts of DP}{79}{subsection.0.9.1}%
\contentsline {subsection}{\numberline {9.2}Bottom-up DP}{79}{subsection.0.9.2}%
\contentsline {subsubsection}{\numberline {9.2.1}Key Characteristics}{79}{subsubsection.0.9.2.1}%
\contentsline {subsubsection}{\numberline {9.2.2}Steps for Bottom-Up DP}{79}{subsubsection.0.9.2.2}%
\contentsline {subsection}{\numberline {9.3}Bottom-up DP: Fibonacci}{80}{subsection.0.9.3}%
\contentsline {subsection}{\numberline {9.4}Memoization (top down DP)}{80}{subsection.0.9.4}%
\contentsline {subsection}{\numberline {9.5}Top-down DP: Fibonacci}{81}{subsection.0.9.5}%
\contentsline {section}{\numberline {10}Dynamic programming}{82}{section.0.10}%
\contentsline {subsection}{\numberline {10.1}LCS (longest common subsequence)}{82}{subsection.0.10.1}%
\contentsline {section}{\numberline {11}Binary trees}{83}{section.0.11}%
\contentsline {subsection}{\numberline {11.1}Terminology}{83}{subsection.0.11.1}%
\contentsline {subsection}{\numberline {11.2}Type of binary trees}{84}{subsection.0.11.2}%
\contentsline {subsection}{\numberline {11.3}Maximum height of a binary tree}{85}{subsection.0.11.3}%
\contentsline {subsubsection}{\numberline {11.3.1}Minimum height of a binary tree}{85}{subsubsection.0.11.3.1}%
\contentsline {subsubsection}{\numberline {11.3.2}Number of Leaves in a Binary Tree}{85}{subsubsection.0.11.3.2}%
\contentsline {subsubsection}{\numberline {11.3.3}Relationship Between Internal Nodes and Leaves:}{85}{subsubsection.0.11.3.3}%
\contentsline {subsubsection}{\numberline {11.3.4}Maximum Number of Nodes at Height h}{85}{subsubsection.0.11.3.4}%
\contentsline {subsubsection}{\numberline {11.3.5}Number of Edges in a Binary Tree:}{86}{subsubsection.0.11.3.5}%
\contentsline {subsection}{\numberline {11.4}Full trees}{87}{subsection.0.11.4}%
\contentsline {subsubsection}{\numberline {11.4.1}Number of leaves}{87}{subsubsection.0.11.4.1}%
\contentsline {subsubsection}{\numberline {11.4.2}Number of nodes}{88}{subsubsection.0.11.4.2}%
\contentsline {subsubsection}{\numberline {11.4.3}Number of internal nodes}{88}{subsubsection.0.11.4.3}%
\contentsline {subsection}{\numberline {11.5}Complete Binary Tree}{89}{subsection.0.11.5}%
\contentsline {subsubsection}{\numberline {11.5.1}Number of nodes}{89}{subsubsection.0.11.5.1}%
\contentsline {subsubsection}{\numberline {11.5.2}Height}{89}{subsubsection.0.11.5.2}%
\contentsline {subsubsection}{\numberline {11.5.3}Number of Leaf Nodes (L) in a Complete Binary Tree}{89}{subsubsection.0.11.5.3}%
\contentsline {subsubsection}{\numberline {11.5.4}Number of internal nodes}{90}{subsubsection.0.11.5.4}%
\contentsline {subsubsection}{\numberline {11.5.5}Parent and Child Relationships in a Complete Binary Tree}{90}{subsubsection.0.11.5.5}%
\contentsline {subsection}{\numberline {11.6}Perfect binary tree}{91}{subsection.0.11.6}%
\contentsline {subsubsection}{\numberline {11.6.1}Number of Nodes}{91}{subsubsection.0.11.6.1}%
\contentsline {subsubsection}{\numberline {11.6.2}Number of Leaf Nodes}{91}{subsubsection.0.11.6.2}%
\contentsline {subsubsection}{\numberline {11.6.3}Height of the Tree}{91}{subsubsection.0.11.6.3}%
\contentsline {subsubsection}{\numberline {11.6.4}Number of Internal Nodes}{91}{subsubsection.0.11.6.4}%
\contentsline {subsubsection}{\numberline {11.6.5}Depth}{91}{subsubsection.0.11.6.5}%
\contentsline {subsection}{\numberline {11.7}Invert a binary tree}{92}{subsection.0.11.7}%
\contentsline {subsubsection}{\numberline {11.7.1}Swap node helper method}{92}{subsubsection.0.11.7.1}%
\contentsline {subsubsection}{\numberline {11.7.2}Level order (BFS) solution}{92}{subsubsection.0.11.7.2}%
\contentsline {subsubsection}{\numberline {11.7.3}Recursive postorder (DFS)}{93}{subsubsection.0.11.7.3}%
\contentsline {subsection}{\numberline {11.8}Lowest common ancestor (LCA)}{94}{subsection.0.11.8}%
\contentsline {subsubsection}{\numberline {11.8.1}LCA in a BST}{95}{subsubsection.0.11.8.1}%
\contentsline {subsubsection}{\numberline {11.8.2}LCA in a normal binary tree}{96}{subsubsection.0.11.8.2}%
\contentsline {subsection}{\numberline {11.9}Find path to a node}{97}{subsection.0.11.9}%
\contentsline {section}{\numberline {12}Applications of binary trees}{98}{section.0.12}%
\contentsline {subsection}{\numberline {12.1}Binary search trees}{98}{subsection.0.12.1}%
\contentsline {subsubsection}{\numberline {12.1.1}Interface}{98}{subsubsection.0.12.1.1}%
\contentsline {subsubsection}{\numberline {12.1.2}Traversals}{99}{subsubsection.0.12.1.2}%
\contentsline {paragraph}{\numberline {12.1.2.1}Level order}{99}{paragraph.0.12.1.2.1}%
\contentsline {paragraph}{\numberline {12.1.2.2}Preorder}{100}{paragraph.0.12.1.2.2}%
\contentsline {paragraph}{\numberline {12.1.2.3}Inorder}{100}{paragraph.0.12.1.2.3}%
\contentsline {paragraph}{\numberline {12.1.2.4}Postorder}{102}{paragraph.0.12.1.2.4}%
\contentsline {subsubsection}{\numberline {12.1.3}Successor of a node}{102}{subsubsection.0.12.1.3}%
\contentsline {subsubsection}{\numberline {12.1.4}Predecessor}{103}{subsubsection.0.12.1.4}%
\contentsline {subsubsection}{\numberline {12.1.5}The node}{103}{subsubsection.0.12.1.5}%
\contentsline {subsubsection}{\numberline {12.1.6}The class}{103}{subsubsection.0.12.1.6}%
\contentsline {subsubsection}{\numberline {12.1.7}Recursive Insertion}{104}{subsubsection.0.12.1.7}%
\contentsline {subsubsection}{\numberline {12.1.8}A better recursive insert}{105}{subsubsection.0.12.1.8}%
\contentsline {subsubsection}{\numberline {12.1.9}Iterative insert}{106}{subsubsection.0.12.1.9}%
\contentsline {subsubsection}{\numberline {12.1.10}Recursive removing}{107}{subsubsection.0.12.1.10}%
\contentsline {subsubsection}{\numberline {12.1.11}Clearing}{109}{subsubsection.0.12.1.11}%
\contentsline {subsubsection}{\numberline {12.1.12}Counting the height of the tree (root)}{110}{subsubsection.0.12.1.12}%
\contentsline {subsubsection}{\numberline {12.1.13}Counting the height of a node}{110}{subsubsection.0.12.1.13}%
\contentsline {subsubsection}{\numberline {12.1.14}Getting the depth of the node}{111}{subsubsection.0.12.1.14}%
\contentsline {subsubsection}{\numberline {12.1.15}Counting the number of nodes}{112}{subsubsection.0.12.1.15}%
\contentsline {subsubsection}{\numberline {12.1.16}Comparison traversals}{112}{subsubsection.0.12.1.16}%
\contentsline {subsubsection}{\numberline {12.1.17}Finding the smallest and largest values}{114}{subsubsection.0.12.1.17}%
\contentsline {subsubsection}{\numberline {12.1.18}Getting the widths of a bst}{115}{subsubsection.0.12.1.18}%
\contentsline {subsubsection}{\numberline {12.1.19}Degenerate Binary Search trees}{117}{subsubsection.0.12.1.19}%
\contentsline {subsubsection}{\numberline {12.1.20}Verifying a binary search tree}{117}{subsubsection.0.12.1.20}%
\contentsline {subsubsection}{\numberline {12.1.21}Complexities}{118}{subsubsection.0.12.1.21}%
\contentsline {subsection}{\numberline {12.2}Adelson-Velsky and Landis Trees (AVL trees)}{119}{subsection.0.12.2}%
\contentsline {subsubsection}{\numberline {12.2.1}Definition}{119}{subsubsection.0.12.2.1}%
\contentsline {subsubsection}{\numberline {12.2.2}AVL Nodes}{120}{subsubsection.0.12.2.2}%
\contentsline {subsubsection}{\numberline {12.2.3}Storing the height}{120}{subsubsection.0.12.2.3}%
\contentsline {subsubsection}{\numberline {12.2.4}Defining balance factors in C++ with enums}{121}{subsubsection.0.12.2.4}%
\contentsline {subsubsection}{\numberline {12.2.5}Defining balance factors with a height calculation}{121}{subsubsection.0.12.2.5}%
\contentsline {subsubsection}{\numberline {12.2.6}Interface}{122}{subsubsection.0.12.2.6}%
\contentsline {subsubsection}{\numberline {12.2.7}Balancing an AVL tree}{122}{subsubsection.0.12.2.7}%
\contentsline {subsubsection}{\numberline {12.2.8}Rotations: Right tree}{123}{subsubsection.0.12.2.8}%
\contentsline {paragraph}{\numberline {12.2.8.1}Case 1: Right higher}{123}{paragraph.0.12.2.8.1}%
\contentsline {paragraph}{\numberline {12.2.8.2}Case 2: Left higher}{126}{paragraph.0.12.2.8.2}%
\contentsline {subsubsection}{\numberline {12.2.9}C++ Rotations}{128}{subsubsection.0.12.2.9}%
\contentsline {subsubsection}{\numberline {12.2.10}Balancing}{130}{subsubsection.0.12.2.10}%
\contentsline {subsubsection}{\numberline {12.2.11}Insertions}{131}{subsubsection.0.12.2.11}%
\contentsline {subsubsection}{\numberline {12.2.12}Removing nodes}{132}{subsubsection.0.12.2.12}%
\contentsline {subsection}{\numberline {12.3}Red-black trees}{134}{subsection.0.12.3}%
\contentsline {subsubsection}{\numberline {12.3.1}Rotations}{136}{subsubsection.0.12.3.1}%
\contentsline {subsubsection}{\numberline {12.3.2}Inserting}{138}{subsubsection.0.12.3.2}%
\contentsline {subsubsection}{\numberline {12.3.3}Deletion}{143}{subsubsection.0.12.3.3}%
\contentsline {subsubsection}{\numberline {12.3.4}C++ implementation}{147}{subsubsection.0.12.3.4}%
\contentsline {paragraph}{\numberline {12.3.4.1}The node structure}{147}{paragraph.0.12.3.4.1}%
\contentsline {paragraph}{\numberline {12.3.4.2}The tree class and defining nil}{147}{paragraph.0.12.3.4.2}%
\contentsline {paragraph}{\numberline {12.3.4.3}Rotation methods}{148}{paragraph.0.12.3.4.3}%
\contentsline {paragraph}{\numberline {12.3.4.4}Insert}{149}{paragraph.0.12.3.4.4}%
\contentsline {paragraph}{\numberline {12.3.4.5}Insert fixup}{150}{paragraph.0.12.3.4.5}%
\contentsline {subsection}{\numberline {12.4}State space tree}{151}{subsection.0.12.4}%
\contentsline {section}{\numberline {13}Heaps and Priority Queues (Zero based)}{152}{section.0.13}%
\contentsline {subsection}{\numberline {13.1}Max and Min heaps}{154}{subsection.0.13.1}%
\contentsline {subsection}{\numberline {13.2}Heapify an array}{154}{subsection.0.13.2}%
\contentsline {subsection}{\numberline {13.3}Min-heap in c++}{155}{subsection.0.13.3}%
\contentsline {subsection}{\numberline {13.4}Max-heap in c++}{156}{subsection.0.13.4}%
\contentsline {subsection}{\numberline {13.5}Percolating}{157}{subsection.0.13.5}%
\contentsline {subsubsection}{\numberline {13.5.1}Percolate up}{157}{subsubsection.0.13.5.1}%
\contentsline {subsubsection}{\numberline {13.5.2}Percolate down}{158}{subsubsection.0.13.5.2}%
\contentsline {subsection}{\numberline {13.6}Inserting into a heap}{159}{subsection.0.13.6}%
\contentsline {subsection}{\numberline {13.7}Removing the root}{160}{subsection.0.13.7}%
\contentsline {subsection}{\numberline {13.8}Removing an arbitary node}{161}{subsection.0.13.8}%
\contentsline {subsection}{\numberline {13.9}Priority queues}{162}{subsection.0.13.9}%
\contentsline {subsubsection}{\numberline {13.9.1}Interface}{162}{subsubsection.0.13.9.1}%
\contentsline {subsubsection}{\numberline {13.9.2}Insert, pop, and top}{163}{subsubsection.0.13.9.2}%
\contentsline {subsubsection}{\numberline {13.9.3}Size and Empty}{164}{subsubsection.0.13.9.3}%
\contentsline {subsection}{\numberline {13.10}Median of a Stream}{165}{subsection.0.13.10}%
\contentsline {section}{\numberline {14}Sorting}{166}{section.0.14}%
\contentsline {subsection}{\numberline {14.1}Bubble, selection, insertion}{166}{subsection.0.14.1}%
\contentsline {subsubsection}{\numberline {14.1.1}Bubble sort}{166}{subsubsection.0.14.1.1}%
\contentsline {paragraph}{\numberline {14.1.1.1}Complexity}{167}{paragraph.0.14.1.1.1}%
\contentsline {subsubsection}{\numberline {14.1.2}Selection sort}{168}{subsubsection.0.14.1.2}%
\contentsline {paragraph}{\numberline {14.1.2.1}Complexity}{168}{paragraph.0.14.1.2.1}%
\contentsline {subsubsection}{\numberline {14.1.3}Insertion sort}{169}{subsubsection.0.14.1.3}%
\contentsline {paragraph}{\numberline {14.1.3.1}Complexity}{170}{paragraph.0.14.1.3.1}%
\contentsline {subsection}{\numberline {14.2}Heap sort}{171}{subsection.0.14.2}%
\contentsline {subsubsection}{\numberline {14.2.1}Complexity}{171}{subsubsection.0.14.2.1}%
\contentsline {subsection}{\numberline {14.3}BST Sort}{172}{subsection.0.14.3}%
\contentsline {subsubsection}{\numberline {14.3.1}Insert}{172}{subsubsection.0.14.3.1}%
\contentsline {subsubsection}{\numberline {14.3.2}The inorder traversal}{172}{subsubsection.0.14.3.2}%
\contentsline {subsubsection}{\numberline {14.3.3}The BST sort function}{173}{subsubsection.0.14.3.3}%
\contentsline {subsubsection}{\numberline {14.3.4}Inplace sorting}{174}{subsubsection.0.14.3.4}%
\contentsline {subsubsection}{\numberline {14.3.5}Complexity}{174}{subsubsection.0.14.3.5}%
\contentsline {subsection}{\numberline {14.4}Quick sort}{175}{subsection.0.14.4}%
\contentsline {subsubsection}{\numberline {14.4.1}Partitioning}{175}{subsubsection.0.14.4.1}%
\contentsline {subsubsection}{\numberline {14.4.2}The quick sort procedure}{176}{subsubsection.0.14.4.2}%
\contentsline {subsubsection}{\numberline {14.4.3}A better partition}{178}{subsubsection.0.14.4.3}%
\contentsline {subsubsection}{\numberline {14.4.4}Median of three partition}{178}{subsubsection.0.14.4.4}%
\contentsline {subsubsection}{\numberline {14.4.5}Quicksort with iterators}{180}{subsubsection.0.14.4.5}%
\contentsline {section}{\numberline {15}Multi-way (m-way) search trees}{181}{section.0.15}%
\contentsline {subsection}{\numberline {15.1}Multi-way Searching}{181}{subsection.0.15.1}%
\contentsline {subsection}{\numberline {15.2}2-4 (2-3-4) Trees}{182}{subsection.0.15.2}%
\contentsline {subsubsection}{\numberline {15.2.1}Insertion}{182}{subsubsection.0.15.2.1}%
\contentsline {subsubsection}{\numberline {15.2.2}Removal}{183}{subsubsection.0.15.2.2}%
\contentsline {subsubsection}{\numberline {15.2.3}Properties}{185}{subsubsection.0.15.2.3}%
\contentsline {subsection}{\numberline {15.3}B-trees}{186}{subsection.0.15.3}%
\contentsline {section}{\numberline {16}Hashing (hash tables)}{187}{section.0.16}%
\contentsline {subsection}{\numberline {16.1}Direct-address table}{187}{subsection.0.16.1}%
\contentsline {subsection}{\numberline {16.2}Hash tables}{188}{subsection.0.16.2}%
\contentsline {subsection}{\numberline {16.3}Independent uniform hashing}{189}{subsection.0.16.3}%
\contentsline {subsection}{\numberline {16.4}Collision resolution by chaining}{189}{subsection.0.16.4}%
\contentsline {subsection}{\numberline {16.5}Analysis of hashing with chaining}{190}{subsection.0.16.5}%
\contentsline {subsection}{\numberline {16.6}Hash functions}{190}{subsection.0.16.6}%
\contentsline {subsubsection}{\numberline {16.6.1}Static hashing}{191}{subsubsection.0.16.6.1}%
\contentsline {subsubsection}{\numberline {16.6.2}The division method}{191}{subsubsection.0.16.6.2}%
\contentsline {subsubsection}{\numberline {16.6.3}The multiplication method}{192}{subsubsection.0.16.6.3}%
\contentsline {subsection}{\numberline {16.7}Open addressing}{192}{subsection.0.16.7}%
\contentsline {subsubsection}{\numberline {16.7.1}Linear probing}{192}{subsubsection.0.16.7.1}%
\contentsline {subsubsection}{\numberline {16.7.2}Quadratic probing}{193}{subsubsection.0.16.7.2}%
\contentsline {subsubsection}{\numberline {16.7.3}Deletion problem in open addressing}{193}{subsubsection.0.16.7.3}%
\contentsline {subsubsection}{\numberline {16.7.4}Tombstoning}{193}{subsubsection.0.16.7.4}%
\contentsline {subsubsection}{\numberline {16.7.5}Lazy deletion}{194}{subsubsection.0.16.7.5}%
\contentsline {subsubsection}{\numberline {16.7.6}Rehashing}{194}{subsubsection.0.16.7.6}%
\contentsline {subsection}{\numberline {16.8}Load factor}{195}{subsection.0.16.8}%
\contentsline {subsection}{\numberline {16.9}Static hashing}{195}{subsection.0.16.9}%
\contentsline {subsection}{\numberline {16.10}Static linear hashing}{195}{subsection.0.16.10}%
\contentsline {subsection}{\numberline {16.11}Static hashing with linear probe implementation}{196}{subsection.0.16.11}%
\contentsline {subsubsection}{\numberline {16.11.1}Interface}{196}{subsubsection.0.16.11.1}%
\contentsline {subsubsection}{\numberline {16.11.2}The basics}{196}{subsubsection.0.16.11.2}%
\contentsline {subsubsection}{\numberline {16.11.3}The hash function}{196}{subsubsection.0.16.11.3}%
\contentsline {subsubsection}{\numberline {16.11.4}Inserts}{197}{subsubsection.0.16.11.4}%
\contentsline {subsubsection}{\numberline {16.11.5}Searching}{198}{subsubsection.0.16.11.5}%
\contentsline {subsubsection}{\numberline {16.11.6}Removing}{198}{subsubsection.0.16.11.6}%
\contentsline {subsubsection}{\numberline {16.11.7}Searching and removing with tombstones}{198}{subsubsection.0.16.11.7}%
\contentsline {subsection}{\numberline {16.12}Static hashing with quadratic probing implementation}{201}{subsection.0.16.12}%
\contentsline {subsubsection}{\numberline {16.12.1}Inserting}{201}{subsubsection.0.16.12.1}%
\contentsline {subsubsection}{\numberline {16.12.2}Searching}{202}{subsubsection.0.16.12.2}%
\contentsline {subsubsection}{\numberline {16.12.3}Removing}{203}{subsubsection.0.16.12.3}%
\contentsline {subsection}{\numberline {16.13}Static hashing with chaining implementation}{204}{subsection.0.16.13}%
\contentsline {subsubsection}{\numberline {16.13.1}The basics}{204}{subsubsection.0.16.13.1}%
\contentsline {subsubsection}{\numberline {16.13.2}Inserting}{204}{subsubsection.0.16.13.2}%
\contentsline {subsubsection}{\numberline {16.13.3}Searching}{204}{subsubsection.0.16.13.3}%
\contentsline {subsubsection}{\numberline {16.13.4}Removing}{205}{subsubsection.0.16.13.4}%
\contentsline {subsection}{\numberline {16.14}Injective hashing}{206}{subsection.0.16.14}%
\contentsline {subsection}{\numberline {16.15}Perfect hashing}{206}{subsection.0.16.15}%
\contentsline {section}{\numberline {17}Implementing an unordered\_map}{207}{section.0.17}%
\contentsline {subsection}{\numberline {17.1}Fields}{207}{subsection.0.17.1}%
\contentsline {subsection}{\numberline {17.2}Interface}{207}{subsection.0.17.2}%
\contentsline {subsection}{\numberline {17.3}Public methods: Hash and rehash}{208}{subsection.0.17.3}%
\contentsline {subsection}{\numberline {17.4}Inserting and erasing}{208}{subsection.0.17.4}%
\contentsline {subsubsection}{\numberline {17.4.1}Insertion}{208}{subsubsection.0.17.4.1}%
\contentsline {subsubsection}{\numberline {17.4.2}Erasing}{209}{subsubsection.0.17.4.2}%
\contentsline {subsection}{\numberline {17.5}Finding and checking if the map is empty}{209}{subsection.0.17.5}%
\contentsline {subsubsection}{\numberline {17.5.1}Finding}{209}{subsubsection.0.17.5.1}%
\contentsline {subsubsection}{\numberline {17.5.2}Empty}{209}{subsubsection.0.17.5.2}%
\contentsline {subsection}{\numberline {17.6}The subscript operator}{210}{subsection.0.17.6}%
\contentsline {section}{\numberline {18}Table indexing and row-major order}{211}{section.0.18}%
\contentsline {subsection}{\numberline {18.1}Row-major order}{211}{subsection.0.18.1}%
\contentsline {subsection}{\numberline {18.2}Row-major order in c++}{212}{subsection.0.18.2}%
\contentsline {section}{\numberline {19}Graphs}{213}{section.0.19}%
\contentsline {subsection}{\numberline {19.1}Simple Graph}{213}{subsection.0.19.1}%
\contentsline {subsection}{\numberline {19.2}Undirected graph}{213}{subsection.0.19.2}%
\contentsline {subsection}{\numberline {19.3}Directed graph}{213}{subsection.0.19.3}%
\contentsline {subsection}{\numberline {19.4}Weighted Graph}{213}{subsection.0.19.4}%
\contentsline {subsection}{\numberline {19.5}Complete Graph}{214}{subsection.0.19.5}%
\contentsline {subsection}{\numberline {19.6}More terms}{214}{subsection.0.19.6}%
\contentsline {subsection}{\numberline {19.7}Graph representations}{214}{subsection.0.19.7}%
\contentsline {subsection}{\numberline {19.8}Interface of adjacency lists and matrices}{215}{subsection.0.19.8}%
\contentsline {subsection}{\numberline {19.9}Complexities for adjacency operations}{215}{subsection.0.19.9}%
\contentsline {subsection}{\numberline {19.10}Graph traversal/search}{215}{subsection.0.19.10}%
\contentsline {subsubsection}{\numberline {19.10.1}Breadth-first-traversal}{216}{subsubsection.0.19.10.1}%
\contentsline {subsubsection}{\numberline {19.10.2}Depth-first traversal}{216}{subsubsection.0.19.10.2}%
\contentsline {subsection}{\numberline {19.11}Shortest path problems}{216}{subsection.0.19.11}%
\contentsline {subsubsection}{\numberline {19.11.1}Dijkstra's shortest path algorithm}{217}{subsubsection.0.19.11.1}%
\contentsline {subsubsection}{\numberline {19.11.2}Dijkstras's algorithm in c++}{218}{subsubsection.0.19.11.2}%
\contentsline {subsection}{\numberline {19.12}Undirected graph in c++ with an adjacency list}{220}{subsection.0.19.12}%
\contentsline {subsubsection}{\numberline {19.12.1}Internal structure}{220}{subsubsection.0.19.12.1}%
\contentsline {subsubsection}{\numberline {19.12.2}Interface}{220}{subsubsection.0.19.12.2}%
\contentsline {subsubsection}{\numberline {19.12.3}Adding edges}{220}{subsubsection.0.19.12.3}%
\contentsline {subsubsection}{\numberline {19.12.4}Adding nodes}{221}{subsubsection.0.19.12.4}%
\contentsline {subsubsection}{\numberline {19.12.5}Getting the neighbors}{221}{subsubsection.0.19.12.5}%
\contentsline {subsubsection}{\numberline {19.12.6}Checking if an edge exists}{221}{subsubsection.0.19.12.6}%
\contentsline {subsubsection}{\numberline {19.12.7}Breadth first traversal}{222}{subsubsection.0.19.12.7}%
\contentsline {subsubsection}{\numberline {19.12.8}Breadth first search to find the shortest path}{223}{subsubsection.0.19.12.8}%
\contentsline {subsubsection}{\numberline {19.12.9}Depth first traversal}{224}{subsubsection.0.19.12.9}%
\contentsline {subsection}{\numberline {19.13}Undirected graph in c++ with adjacency matrix}{225}{subsection.0.19.13}%
\contentsline {subsubsection}{\numberline {19.13.1}Setup}{225}{subsubsection.0.19.13.1}%
\contentsline {subsubsection}{\numberline {19.13.2}Adding an edge}{225}{subsubsection.0.19.13.2}%
\contentsline {subsubsection}{\numberline {19.13.3}Removing an edge}{225}{subsubsection.0.19.13.3}%
\contentsline {subsubsection}{\numberline {19.13.4}Getting neighbors}{225}{subsubsection.0.19.13.4}%
\contentsline {subsubsection}{\numberline {19.13.5}Checking if an edge exists}{226}{subsubsection.0.19.13.5}%
\contentsline {subsubsection}{\numberline {19.13.6}Breadth-first traversal}{227}{subsubsection.0.19.13.6}%
\contentsline {subsubsection}{\numberline {19.13.7}Depth-first traversal}{228}{subsubsection.0.19.13.7}%
\contentsline {subsection}{\numberline {19.14}Weighted graph in C++ with an adjacency matrix}{229}{subsection.0.19.14}%
\contentsline {subsubsection}{\numberline {19.14.1}Setup}{229}{subsubsection.0.19.14.1}%
\contentsline {subsubsection}{\numberline {19.14.2}Adding and removing edges}{229}{subsubsection.0.19.14.2}%
\contentsline {subsubsection}{\numberline {19.14.3}Dijkstra}{230}{subsubsection.0.19.14.3}%
\contentsline {subsection}{\numberline {19.15}Weighted graph in c++ with structure}{231}{subsection.0.19.15}%
\contentsline {subsection}{\numberline {19.16}Topological sort (DFS approach)}{232}{subsection.0.19.16}%
\contentsline {subsubsection}{\numberline {19.16.1}C++ Setup}{232}{subsubsection.0.19.16.1}%
\contentsline {subsubsection}{\numberline {19.16.2}Topological sort with dfs helper}{232}{subsubsection.0.19.16.2}%
\contentsline {subsection}{\numberline {19.17}DFS Topological sort with cycle detection}{234}{subsection.0.19.17}%
\contentsline {subsection}{\numberline {19.18}Union-Find Data Structure (Disjoint Set Union - DSU)}{235}{subsection.0.19.18}%
\contentsline {subsubsection}{\numberline {19.18.1}Class structure and Fields}{235}{subsubsection.0.19.18.1}%
\contentsline {subsubsection}{\numberline {19.18.2}Find}{235}{subsubsection.0.19.18.2}%
\contentsline {subsubsection}{\numberline {19.18.3}Union}{236}{subsubsection.0.19.18.3}%
\contentsline {subsubsection}{\numberline {19.18.4}Find and union optimizations}{236}{subsubsection.0.19.18.4}%
\contentsline {subsection}{\numberline {19.19}Using UnionFind}{237}{subsection.0.19.19}%
\contentsline {subsection}{\numberline {19.20}Minimum spanning trees}{238}{subsection.0.19.20}%
\contentsline {subsubsection}{\numberline {19.20.1}Kruskal's algorithm}{238}{subsubsection.0.19.20.1}%
\contentsline {section}{\numberline {20}Prefix and suffix sums, products, etc}{241}{section.0.20}%
\contentsline {subsection}{\numberline {20.1}Suffix sums and products}{241}{subsection.0.20.1}%
\contentsline {section}{\numberline {21}Two pointer}{243}{section.0.21}%
\contentsline {subsection}{\numberline {21.1}Two Sum II - Input Array Is Sorted}{243}{subsection.0.21.1}%
\contentsline {subsection}{\numberline {21.2}Is valid palindrome}{244}{subsection.0.21.2}%
\contentsline {section}{\numberline {22}Greedy algorithms}{245}{section.0.22}%
\contentsline {section}{\numberline {23}Subarray problems}{246}{section.0.23}%
\contentsline {subsection}{\numberline {23.1}Brute force subarray generation ($O(n^{2})$)}{246}{subsection.0.23.1}%
\contentsline {subsection}{\numberline {23.2}Max subarray sum: Kadane's algorithm ($O(n)$)}{246}{subsection.0.23.2}%
\contentsline {section}{\numberline {24}Divide and conquer}{247}{section.0.24}%
\contentsline {section}{\numberline {25}STL}{248}{section.0.25}%
\contentsline {subsection}{\numberline {25.1}<algorithm>}{248}{subsection.0.25.1}%
\contentsline {subsubsection}{\numberline {25.1.1}stable\_partition}{248}{subsubsection.0.25.1.1}%
\contentsline {subsubsection}{\numberline {25.1.2}partition}{248}{subsubsection.0.25.1.2}%
\contentsline {subsubsection}{\numberline {25.1.3}partition\_copy}{248}{subsubsection.0.25.1.3}%
\contentsline {subsubsection}{\numberline {25.1.4}is\_partitioned}{249}{subsubsection.0.25.1.4}%
\contentsline {subsubsection}{\numberline {25.1.5}partition\_pont}{249}{subsubsection.0.25.1.5}%
