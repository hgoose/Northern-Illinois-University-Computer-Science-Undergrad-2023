\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8\relax}]
\PYG{+w}{            }\PYG{c+c1}{// If the top of the stack is left parenthesis}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{stack}\PYG{p}{.}\PYG{n}{size}\PYG{p}{())}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{pop}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// pop the stack}
\PYG{+w}{                }\PYG{k}{continue}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Proceed to the next infix character}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}

\PYG{+w}{        }\PYG{c+c1}{// The character is an operator}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}

\PYG{+w}{            }\PYG{c+c1}{// While the stack is not empty, and the precedence of the current infix character is \PYGZlt{}= the precedence of the character at the top of the stack}
\PYG{+w}{            }\PYG{k}{while}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{stack}\PYG{p}{.}\PYG{n}{size}\PYG{p}{()}\PYG{+w}{ }\PYG{o}{\PYGZam{}\PYGZam{}}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{precedence}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{)}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{precedence}\PYG{p}{(}\PYG{n}{stack}\PYG{p}{.}\PYG{n}{top}\PYG{p}{())))}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{top}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Append the character on the top of the stack to the return string}
\PYG{+w}{                }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{} \PYGZsq{}}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Tack on a space}
\PYG{+w}{                }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{pop}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Pop the stack}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}

\PYG{+w}{            }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{push}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// Push the current infix character to the stack}
\PYG{+w}{            }\PYG{k}{continue}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Proceed to the next infix character}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{c+c1}{// While the stack is not empty}
\PYG{+w}{    }\PYG{k}{while}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{stack}\PYG{p}{.}\PYG{n}{size}\PYG{p}{())}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{top}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Append the character on the top of the stack to the return string}
\PYG{+w}{        }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{} \PYGZsq{}}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Tack on a space}
\PYG{+w}{        }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{pop}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Pop the stack}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{c+c1}{// Return the result}
\PYG{+w}{    }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{postfix}\PYG{p}{;}

\PYG{p}{\PYGZcb{}}
\end{Verbatim}
