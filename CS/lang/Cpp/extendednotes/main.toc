\contentsline {section}{\numberline {1}STL Containers}{10}{section.0.1}%
\contentsline {subsection}{\numberline {1.1}STL Vectors}{10}{subsection.0.1.1}%
\contentsline {subsubsection}{\numberline {1.1.1}Implementation}{10}{subsubsection.0.1.1.1}%
\contentsline {subsubsection}{\numberline {1.1.2}Performance in operations on the end}{10}{subsubsection.0.1.1.2}%
\contentsline {subsubsection}{\numberline {1.1.3}Size and capacity}{10}{subsubsection.0.1.1.3}%
\contentsline {subsubsection}{\numberline {1.1.4}Constructors}{11}{subsubsection.0.1.1.4}%
\contentsline {subsubsection}{\numberline {1.1.5}Note about at()}{12}{subsubsection.0.1.1.5}%
\contentsline {subsubsection}{\numberline {1.1.6}Iterator methods}{12}{subsubsection.0.1.1.6}%
\contentsline {subsubsection}{\numberline {1.1.7}Using vectors as 2d arrays}{12}{subsubsection.0.1.1.7}%
\contentsline {subsubsection}{\numberline {1.1.8}For those interested}{14}{subsubsection.0.1.1.8}%
\contentsline {paragraph}{\numberline {1.1.8.1}Manual Dynamic Memory Allocation (Using new)}{14}{paragraph.0.1.1.8.1}%
\contentsline {paragraph}{\numberline {1.1.8.2}Using unique pointer}{14}{paragraph.0.1.1.8.2}%
\contentsline {paragraph}{\numberline {1.1.8.3}Recall: Unique pointer for dynamic arry}{15}{paragraph.0.1.1.8.3}%
\contentsline {paragraph}{\numberline {1.1.8.4}If sizes are truly known at compile time}{16}{paragraph.0.1.1.8.4}%
\contentsline {subsection}{\numberline {1.2}STL Deque}{17}{subsection.0.1.2}%
\contentsline {subsubsection}{\numberline {1.2.1}Implementation}{17}{subsubsection.0.1.2.1}%
\contentsline {subsubsection}{\numberline {1.2.2}Abilities, performance, uses}{17}{subsubsection.0.1.2.2}%
\contentsline {subsubsection}{\numberline {1.2.3}When to use deques}{17}{subsubsection.0.1.2.3}%
\contentsline {subsubsection}{\numberline {1.2.4}Constructors}{18}{subsubsection.0.1.2.4}%
\contentsline {subsection}{\numberline {1.3}STL Lists}{19}{subsection.0.1.3}%
\contentsline {subsubsection}{\numberline {1.3.1}Implementation}{19}{subsubsection.0.1.3.1}%
\contentsline {subsubsection}{\numberline {1.3.2}Abilities}{19}{subsubsection.0.1.3.2}%
\contentsline {subsubsection}{\numberline {1.3.3}Differencs in the methods}{19}{subsubsection.0.1.3.3}%
\contentsline {subsubsection}{\numberline {1.3.4}Constructors}{20}{subsubsection.0.1.3.4}%
\contentsline {subsubsection}{\numberline {1.3.5}Element access}{20}{subsubsection.0.1.3.5}%
\contentsline {subsubsection}{\numberline {1.3.6}Iterator functions}{20}{subsubsection.0.1.3.6}%
\contentsline {subsubsection}{\numberline {1.3.7}Splice Functions and Functions to Change the Order of Elements}{21}{subsubsection.0.1.3.7}%
\contentsline {subsection}{\numberline {1.4}STL Forward lists}{22}{subsection.0.1.4}%
\contentsline {subsubsection}{\numberline {1.4.1}Implementation}{22}{subsubsection.0.1.4.1}%
\contentsline {subsubsection}{\numberline {1.4.2}Abilities, limitations}{22}{subsubsection.0.1.4.2}%
\contentsline {subsubsection}{\numberline {1.4.3}No size()?}{23}{subsubsection.0.1.4.3}%
\contentsline {subsubsection}{\numberline {1.4.4}Similarities to list}{23}{subsubsection.0.1.4.4}%
\contentsline {subsubsection}{\numberline {1.4.5}Constructors}{24}{subsubsection.0.1.4.5}%
\contentsline {subsection}{\numberline {1.5}STL Sets and multisets}{25}{subsection.0.1.5}%
\contentsline {subsubsection}{\numberline {1.5.1}Implementation}{25}{subsubsection.0.1.5.1}%
\contentsline {subsubsection}{\numberline {1.5.2}Strict weak ordering}{25}{subsubsection.0.1.5.2}%
\contentsline {subsubsection}{\numberline {1.5.3}Abilities}{26}{subsubsection.0.1.5.3}%
\contentsline {subsubsection}{\numberline {1.5.4}Changing elements directly, no direct element access}{26}{subsubsection.0.1.5.4}%
\contentsline {subsubsection}{\numberline {1.5.5}Constructors}{26}{subsubsection.0.1.5.5}%
\contentsline {subsubsection}{\numberline {1.5.6}Types}{27}{subsubsection.0.1.5.6}%
\contentsline {subsubsection}{\numberline {1.5.7}Constructors}{28}{subsubsection.0.1.5.7}%
\contentsline {subsection}{\numberline {1.6}STL Maps and multimaps}{29}{subsection.0.1.6}%
\contentsline {subsubsection}{\numberline {1.6.1}Implementation}{29}{subsubsection.0.1.6.1}%
\contentsline {subsubsection}{\numberline {1.6.2}Template parameters}{29}{subsubsection.0.1.6.2}%
\contentsline {subsubsection}{\numberline {1.6.3}Abilities}{29}{subsubsection.0.1.6.3}%
\contentsline {subsubsection}{\numberline {1.6.4}Constructors and types}{30}{subsubsection.0.1.6.4}%
\contentsline {subsubsection}{\numberline {1.6.5}Using maps as associative arrays}{31}{subsubsection.0.1.6.5}%
\contentsline {subsubsection}{\numberline {1.6.6}Constructors}{31}{subsubsection.0.1.6.6}%
\contentsline {subsection}{\numberline {1.7}Example of bounds and equal range}{33}{subsection.0.1.7}%
\contentsline {subsection}{\numberline {1.8}STL Unordered containers}{34}{subsection.0.1.8}%
\contentsline {subsubsection}{\numberline {1.8.1}Implementation}{34}{subsubsection.0.1.8.1}%
\contentsline {subsubsection}{\numberline {1.8.2}Abilities}{34}{subsubsection.0.1.8.2}%
\contentsline {subsubsection}{\numberline {1.8.3}Disadvantages}{35}{subsubsection.0.1.8.3}%
\contentsline {subsection}{\numberline {1.9}STL Containers: Implementations}{36}{subsection.0.1.9}%
\contentsline {subsection}{\numberline {1.10}STL Containers: Iterator Functions}{37}{subsection.0.1.10}%
\contentsline {subsection}{\numberline {1.11}STL containers: Main concepts, differences, uses}{38}{subsection.0.1.11}%
\contentsline {subsection}{\numberline {1.12}STL Containers: Iterator invalidation}{40}{subsection.0.1.12}%
\contentsline {subsection}{\numberline {1.13}STL Containers: Reallocation}{41}{subsection.0.1.13}%
\contentsline {subsection}{\numberline {1.14}STL Containers: Element access}{42}{subsection.0.1.14}%
\contentsline {subsection}{\numberline {1.15}STL Containers: Uses and advantages}{43}{subsection.0.1.15}%
\contentsline {subsection}{\numberline {1.16}STL Iterators}{44}{subsection.0.1.16}%
\contentsline {subsection}{\numberline {1.17}Complexity of container operations}{48}{subsection.0.1.17}%
\contentsline {section}{\numberline {2}STL Algorithms}{49}{section.0.2}%
\contentsline {subsection}{\numberline {2.1}<algorithm>}{49}{subsection.0.2.1}%
\contentsline {subsection}{\numberline {2.2}<numeric>}{50}{subsection.0.2.2}%
\contentsline {subsubsection}{\numberline {2.2.1}transform\_reduce}{50}{subsubsection.0.2.2.1}%
\contentsline {paragraph}{\numberline {2.2.1.1}Unary transform and reduce}{50}{paragraph.0.2.2.1.1}%
\contentsline {paragraph}{\numberline {2.2.1.2}Binary transform and reduce}{51}{paragraph.0.2.2.1.2}%
\contentsline {paragraph}{\numberline {2.2.1.3}std::plus<> and std::multiplies<>}{52}{paragraph.0.2.2.1.3}%
\contentsline {paragraph}{\numberline {2.2.1.4}Other key function objects}{52}{paragraph.0.2.2.1.4}%
\contentsline {section}{\numberline {3}Labels and goto}{54}{section.0.3}%
\contentsline {section}{\numberline {4}Type traits}{55}{section.0.4}%
\contentsline {subsection}{\numberline {4.1}Nonstandard type of types}{55}{subsection.0.4.1}%
\contentsline {subsection}{\numberline {4.2}::value, ::type, and ::value\_type}{56}{subsection.0.4.2}%
\contentsline {section}{\numberline {5}Function Objects}{57}{section.0.5}%
\contentsline {paragraph}{\numberline {5.0.0.1}Why?}{57}{paragraph.0.5.0.0.1}%
\contentsline {paragraph}{\numberline {5.0.0.2}Predefined function objects}{58}{paragraph.0.5.0.0.2}%
\contentsline {section}{\numberline {6}Decltype}{58}{section.0.6}%
\contentsline {subsection}{\numberline {6.1}Syntax}{58}{subsection.0.6.1}%
\contentsline {subsection}{\numberline {6.2}Example}{59}{subsection.0.6.2}%
\contentsline {subsection}{\numberline {6.3}Things to pair with decltype}{59}{subsection.0.6.3}%
\contentsline {section}{\numberline {7}Constexpr}{60}{section.0.7}%
\contentsline {subsection}{\numberline {7.1}Variables}{60}{subsection.0.7.1}%
\contentsline {subsection}{\numberline {7.2}Functions}{60}{subsection.0.7.2}%
\contentsline {subsection}{\numberline {7.3}Object Constructors}{61}{subsection.0.7.3}%
\contentsline {subsection}{\numberline {7.4}constexpr vs const}{61}{subsection.0.7.4}%
\contentsline {section}{\numberline {8}Function pointers and callable parametrs}{62}{section.0.8}%
\contentsline {subsection}{\numberline {8.1}Function pointers}{62}{subsection.0.8.1}%
\contentsline {subsubsection}{\numberline {8.1.1}As types}{62}{subsubsection.0.8.1.1}%
\contentsline {subsubsection}{\numberline {8.1.2}As function paramater}{62}{subsubsection.0.8.1.2}%
\contentsline {subsubsection}{\numberline {8.1.3}Function pointers to member functions}{63}{subsubsection.0.8.1.3}%
\contentsline {subsection}{\numberline {8.2}Using std::function}{64}{subsection.0.8.2}%
\contentsline {subsection}{\numberline {8.3}With forwarding references}{64}{subsection.0.8.3}%
\contentsline {section}{\numberline {9}Templates}{65}{section.0.9}%
\contentsline {subsection}{\numberline {9.1}Template Function}{65}{subsection.0.9.1}%
\contentsline {subsection}{\numberline {9.2}Template Class}{66}{subsection.0.9.2}%
\contentsline {subsection}{\numberline {9.3}Class vs typename keyword}{66}{subsection.0.9.3}%
\contentsline {subsection}{\numberline {9.4}Handle friend functions}{66}{subsection.0.9.4}%
\contentsline {subsubsection}{\numberline {9.4.1}Friendship to a Non-Template Function}{66}{subsubsection.0.9.4.1}%
\contentsline {subsubsection}{\numberline {9.4.2}Friendship to a Template Function}{67}{subsubsection.0.9.4.2}%
\contentsline {subsection}{\numberline {9.5}Function Template Specialization}{69}{subsection.0.9.5}%
\contentsline {subsection}{\numberline {9.6}Class/Struct Template Specialization}{69}{subsection.0.9.6}%
\contentsline {subsection}{\numberline {9.7}Template Parameters}{69}{subsection.0.9.7}%
\contentsline {subsection}{\numberline {9.8}Trailing return type}{69}{subsection.0.9.8}%
\contentsline {subsubsection}{\numberline {9.8.1}Syntax}{70}{subsubsection.0.9.8.1}%
\contentsline {subsubsection}{\numberline {9.8.2}Example}{70}{subsubsection.0.9.8.2}%
\contentsline {subsection}{\numberline {9.9}Template functions with mixed types (Trailing return type)}{70}{subsection.0.9.9}%
\contentsline {subsection}{\numberline {9.10}Template functions with mixed types (Deduced return type)}{71}{subsection.0.9.10}%
\contentsline {subsection}{\numberline {9.11}Dependent name resolution}{71}{subsection.0.9.11}%
\contentsline {subsubsection}{\numberline {9.11.1}Dependent names}{71}{subsubsection.0.9.11.1}%
\contentsline {subsubsection}{\numberline {9.11.2}Typename Keyword}{71}{subsubsection.0.9.11.2}%
\contentsline {subsubsection}{\numberline {9.11.3}Nested types}{72}{subsubsection.0.9.11.3}%
\contentsline {subsubsection}{\numberline {9.11.4}Prereq: Using aliases defined in classes}{72}{subsubsection.0.9.11.4}%
\contentsline {subsubsection}{\numberline {9.11.5}Type Aliases}{73}{subsubsection.0.9.11.5}%
\contentsline {subsubsection}{\numberline {9.11.6}Return Types in Template Functions}{74}{subsubsection.0.9.11.6}%
\contentsline {subsubsection}{\numberline {9.11.7}Base Class Members}{74}{subsubsection.0.9.11.7}%
\contentsline {subsubsection}{\numberline {9.11.8}Dependent Types in Expressions}{74}{subsubsection.0.9.11.8}%
\contentsline {subsection}{\numberline {9.12}Variadic templates with functions}{74}{subsection.0.9.12}%
\contentsline {subsection}{\numberline {9.13}Left vs right folds}{78}{subsection.0.9.13}%
\contentsline {subsection}{\numberline {9.14}Parentheses in fold expressions}{79}{subsection.0.9.14}%
\contentsline {subsection}{\numberline {9.15}Pack size}{79}{subsection.0.9.15}%
\contentsline {subsection}{\numberline {9.16}Function calls in fold expressions}{80}{subsection.0.9.16}%
\contentsline {subsection}{\numberline {9.17}Variadic templates with classes}{81}{subsection.0.9.17}%
\contentsline {subsection}{\numberline {9.18}std::forward}{83}{subsection.0.9.18}%
\contentsline {subsubsection}{\numberline {9.18.1}Key Differences Between std::forward and std::move}{83}{subsubsection.0.9.18.1}%
\contentsline {subsection}{\numberline {9.19}Universal reference (forwarding reference)}{85}{subsection.0.9.19}%
\contentsline {subsection}{\numberline {9.20}Concepts}{86}{subsection.0.9.20}%
\contentsline {section}{\numberline {10}More on the comma operator}{88}{section.0.10}%
\contentsline {section}{\numberline {11}More on Lambdas}{89}{section.0.11}%
\contentsline {subsection}{\numberline {11.1}Auto in lambda args}{89}{subsection.0.11.1}%
\contentsline {subsection}{\numberline {11.2}Template lambdas}{89}{subsection.0.11.2}%
\contentsline {subsection}{\numberline {11.3}Recursive lambdas}{90}{subsection.0.11.3}%
\contentsline {section}{\numberline {12}When initializer lists are required}{91}{section.0.12}%
\contentsline {section}{\numberline {13}Inheritence and Subtype Polymorphism}{92}{section.0.13}%
\contentsline {subsection}{\numberline {13.1}OOP Main Concepts}{92}{subsection.0.13.1}%
\contentsline {subsection}{\numberline {13.2}Object Relationships}{92}{subsection.0.13.2}%
\contentsline {subsection}{\numberline {13.3}Ineritance}{93}{subsection.0.13.3}%
\contentsline {subsection}{\numberline {13.4}Inheritance and Member Access}{93}{subsection.0.13.4}%
\contentsline {subsection}{\numberline {13.5}Inheritance Syntax}{94}{subsection.0.13.5}%
\contentsline {subsection}{\numberline {13.6}Upcasting and Downcasting}{95}{subsection.0.13.6}%
\contentsline {subsection}{\numberline {13.7}More on Downcasting}{96}{subsection.0.13.7}%
\contentsline {subsubsection}{\numberline {13.7.1}What Happens Without Virtual Functions}{97}{subsubsection.0.13.7.1}%
\contentsline {subsubsection}{\numberline {13.7.2}Downcasting example}{98}{subsubsection.0.13.7.2}%
\contentsline {subsubsection}{\numberline {13.7.3}Base class pointer example}{99}{subsubsection.0.13.7.3}%
\contentsline {subsection}{\numberline {13.8}Object Slicing}{99}{subsection.0.13.8}%
\contentsline {subsection}{\numberline {13.9}Multiple Inheritance}{101}{subsection.0.13.9}%
\contentsline {subsubsection}{\numberline {13.9.1}Why Use Multiple Inheritance?}{101}{subsubsection.0.13.9.1}%
\contentsline {subsubsection}{\numberline {13.9.2}Example}{101}{subsubsection.0.13.9.2}%
\contentsline {subsubsection}{\numberline {13.9.3}Issues with Multiple Inheritance}{102}{subsubsection.0.13.9.3}%
\contentsline {subsection}{\numberline {13.10}Virtual inheritance}{103}{subsection.0.13.10}%
\contentsline {subsubsection}{\numberline {13.10.1}The Diamond Problem}{103}{subsubsection.0.13.10.1}%
\contentsline {subsubsection}{\numberline {13.10.2}Solution with Virtual Inheritance}{104}{subsubsection.0.13.10.2}%
\contentsline {subsection}{\numberline {13.11}Subtype Polymorphism}{104}{subsection.0.13.11}%
\contentsline {subsection}{\numberline {13.12}Declaring Virtual Member Functions}{105}{subsection.0.13.12}%
\contentsline {subsubsection}{\numberline {13.12.1}The override keyword}{105}{subsubsection.0.13.12.1}%
\contentsline {subsection}{\numberline {13.13}Abstract or Pure virtual Member Functions}{106}{subsection.0.13.13}%
\contentsline {subsection}{\numberline {13.14}Abstract Classes}{106}{subsection.0.13.14}%
\contentsline {subsection}{\numberline {13.15}Interface Inheritance}{107}{subsection.0.13.15}%
\contentsline {section}{\numberline {14}<regex.h> Pattern Matching and String Validation}{108}{section.0.14}%
\contentsline {subsection}{\numberline {14.1}regcomp}{108}{subsection.0.14.1}%
\contentsline {subsubsection}{\numberline {14.1.1}Signature}{108}{subsubsection.0.14.1.1}%
\contentsline {subsubsection}{\numberline {14.1.2}Return value}{108}{subsubsection.0.14.1.2}%
\contentsline {subsubsection}{\numberline {14.1.3}Return errors}{108}{subsubsection.0.14.1.3}%
\contentsline {subsubsection}{\numberline {14.1.4}Flags}{109}{subsubsection.0.14.1.4}%
\contentsline {subsection}{\numberline {14.2}Regexec}{109}{subsection.0.14.2}%
\contentsline {subsubsection}{\numberline {14.2.1}Signature}{110}{subsubsection.0.14.2.1}%
\contentsline {subsubsection}{\numberline {14.2.2}Return value}{110}{subsubsection.0.14.2.2}%
\contentsline {subsection}{\numberline {14.3}Regerror}{110}{subsection.0.14.3}%
\contentsline {subsubsection}{\numberline {14.3.1}Signature}{110}{subsubsection.0.14.3.1}%
\contentsline {subsubsection}{\numberline {14.3.2}Return value}{111}{subsubsection.0.14.3.2}%
\contentsline {subsection}{\numberline {14.4}Regfree}{111}{subsection.0.14.4}%
\contentsline {subsubsection}{\numberline {14.4.1}Signature}{111}{subsubsection.0.14.4.1}%
\contentsline {subsection}{\numberline {14.5}regmatch\_t and pmatch}{112}{subsection.0.14.5}%
\contentsline {subsubsection}{\numberline {14.5.1}regmatch\_t}{112}{subsubsection.0.14.5.1}%
\contentsline {subsubsection}{\numberline {14.5.2}pmatch array}{113}{subsubsection.0.14.5.2}%
\contentsline {subsection}{\numberline {14.6}Regex Example}{113}{subsection.0.14.6}%
\contentsline {section}{\numberline {15}Structured bindings}{116}{section.0.15}%
\contentsline {subsection}{\numberline {15.1}As unpacks}{116}{subsection.0.15.1}%
\contentsline {subsection}{\numberline {15.2}With returning}{116}{subsection.0.15.2}%
\contentsline {subsection}{\numberline {15.3}With structs and classes}{117}{subsection.0.15.3}%
\contentsline {subsection}{\numberline {15.4}With maps}{117}{subsection.0.15.4}%
\contentsline {section}{\numberline {16}Attributes in c++}{118}{section.0.16}%
\contentsline {subsection}{\numberline {16.1}General Attributes}{118}{subsection.0.16.1}%
\contentsline {section}{\numberline {17}Inline functions}{121}{section.0.17}%
\contentsline {section}{\numberline {18}Advanced iterator usage}{122}{section.0.18}%
\contentsline {subsection}{\numberline {18.1}base()}{122}{subsection.0.18.1}%
\contentsline {section}{\numberline {19}Regular expressions in c++}{123}{section.0.19}%
\contentsline {subsection}{\numberline {19.1}Basic components}{123}{subsection.0.19.1}%
\contentsline {subsubsection}{\numberline {19.1.1}The regex object}{123}{subsubsection.0.19.1.1}%
\contentsline {subsubsection}{\numberline {19.1.2}The smatch array}{123}{subsubsection.0.19.1.2}%
\contentsline {subsubsection}{\numberline {19.1.3}regex\_match}{124}{subsubsection.0.19.1.3}%
\contentsline {subsubsection}{\numberline {19.1.4}regex\_search}{124}{subsubsection.0.19.1.4}%
\contentsline {subsubsection}{\numberline {19.1.5}regex\_replace}{126}{subsubsection.0.19.1.5}%
\contentsline {subsection}{\numberline {19.2}match\_results}{126}{subsection.0.19.2}%
\contentsline {subsubsection}{\numberline {19.2.1}Methods}{126}{subsubsection.0.19.2.1}%
\contentsline {subsection}{\numberline {19.3}sub\_match}{127}{subsection.0.19.3}%
\contentsline {subsection}{\numberline {19.4}Passing string iterators}{128}{subsection.0.19.4}%
\contentsline {subsubsection}{\numberline {19.4.1}Getting all matches}{128}{subsubsection.0.19.4.1}%
\contentsline {subsection}{\numberline {19.5}smatch prefix and suffix}{129}{subsection.0.19.5}%
\contentsline {section}{\numberline {20}Standard namespace}{131}{section.0.20}%
\contentsline {subsection}{\numberline {20.1}std::bind}{131}{subsection.0.20.1}%
\contentsline {subsubsection}{\numberline {20.1.1}std::placeholders}{131}{subsubsection.0.20.1.1}%
\contentsline {subsubsection}{\numberline {20.1.2}Using std::ref with bind}{132}{subsubsection.0.20.1.2}%
\contentsline {subsection}{\numberline {20.2}std::invoke}{133}{subsection.0.20.2}%
\contentsline {subsubsection}{\numberline {20.2.1}Calling a regular function}{133}{subsubsection.0.20.2.1}%
\contentsline {subsubsection}{\numberline {20.2.2}Calling a member function}{133}{subsubsection.0.20.2.2}%
\contentsline {subsubsection}{\numberline {20.2.3}Accessing a member variable}{134}{subsubsection.0.20.2.3}%
\contentsline {subsubsection}{\numberline {20.2.4}Calling a lambda}{134}{subsubsection.0.20.2.4}%
\contentsline {subsection}{\numberline {20.3}std::exchange}{135}{subsection.0.20.3}%
\contentsline {subsection}{\numberline {20.4}std::swap}{136}{subsection.0.20.4}%
\contentsline {subsection}{\numberline {20.5}std::get}{137}{subsection.0.20.5}%
\contentsline {subsection}{\numberline {20.6}std::tuple}{138}{subsection.0.20.6}%
\contentsline {subsubsection}{\numberline {20.6.1}std::tuple and std::make\_tuple}{138}{subsubsection.0.20.6.1}%
\contentsline {subsubsection}{\numberline {20.6.2}Modifying elements}{138}{subsubsection.0.20.6.2}%
\contentsline {subsubsection}{\numberline {20.6.3}std::tuple\_size}{138}{subsubsection.0.20.6.3}%
\contentsline {subsubsection}{\numberline {20.6.4}Unpacking with std::tie}{139}{subsubsection.0.20.6.4}%
\contentsline {subsubsection}{\numberline {20.6.5}std::tie with std::ignore}{139}{subsubsection.0.20.6.5}%
\contentsline {subsubsection}{\numberline {20.6.6}std::optional}{139}{subsubsection.0.20.6.6}%
\contentsline {section}{\numberline {21}Views and Ranges}{140}{section.0.21}%
\contentsline {subsection}{\numberline {21.1}Views}{140}{subsection.0.21.1}%
\contentsline {subsubsection}{\numberline {21.1.1}Filter and transform}{140}{subsubsection.0.21.1.1}%
\contentsline {subsubsection}{\numberline {21.1.2}Iota}{141}{subsubsection.0.21.1.2}%
\contentsline {subsubsection}{\numberline {21.1.3}Take and drop}{141}{subsubsection.0.21.1.3}%
\contentsline {subsection}{\numberline {21.2}The ranges library}{141}{subsection.0.21.2}%
\contentsline {subsection}{\numberline {21.3}std::span}{141}{subsection.0.21.3}%
\contentsline {subsubsection}{\numberline {21.3.1}subspans}{142}{subsubsection.0.21.3.1}%
\contentsline {subsubsection}{\numberline {21.3.2}Key member functions}{142}{subsubsection.0.21.3.2}%
\contentsline {section}{\numberline {22}constexpr, consteval, and constinit}{143}{section.0.22}%
\contentsline {subsection}{\numberline {22.1}constexpr Objects}{143}{subsection.0.22.1}%
\contentsline {subsection}{\numberline {22.2}More on constexpr variables}{144}{subsection.0.22.2}%
\contentsline {subsection}{\numberline {22.3}When const Can Make a Compile-Time Constant}{144}{subsection.0.22.3}%
\contentsline {subsection}{\numberline {22.4}if constexpr}{145}{subsection.0.22.4}%
\contentsline {subsection}{\numberline {22.5}Is constexpr const}{146}{subsection.0.22.5}%
\contentsline {subsection}{\numberline {22.6}consteval}{146}{subsection.0.22.6}%
\contentsline {subsection}{\numberline {22.7}constinit}{148}{subsection.0.22.7}%
\contentsline {subsection}{\numberline {22.8}constexpr and consteval functions are implicitly inline}{148}{subsection.0.22.8}%
\contentsline {section}{\numberline {23}Smart pointers}{149}{section.0.23}%
\contentsline {subsection}{\numberline {23.1}Class shared\_ptr}{150}{subsection.0.23.1}%
\contentsline {subsubsection}{\numberline {23.1.1}Using Class shared\_ptr}{150}{subsubsection.0.23.1.1}%
\contentsline {subsubsection}{\numberline {23.1.2}Defining a Deleter}{152}{subsubsection.0.23.1.2}%
\contentsline {subsubsection}{\numberline {23.1.3}Dealing with Arrays}{153}{subsubsection.0.23.1.3}%
\contentsline {subsubsection}{\numberline {23.1.4}More on make\_shared}{154}{subsubsection.0.23.1.4}%
\contentsline {subsubsection}{\numberline {23.1.5}Understanding the reference count}{155}{subsubsection.0.23.1.5}%
\contentsline {subsubsection}{\numberline {23.1.6}Cyclic references}{156}{subsubsection.0.23.1.6}%
\contentsline {subsection}{\numberline {23.2}Class weak\_ptr}{157}{subsection.0.23.2}%
\contentsline {subsubsection}{\numberline {23.2.1}Using a weak\_ptr}{158}{subsubsection.0.23.2.1}%
\contentsline {subsection}{\numberline {23.3}Unique\_ptr}{159}{subsection.0.23.3}%
\contentsline {subsubsection}{\numberline {23.3.1}Using a unique\_ptr}{160}{subsubsection.0.23.3.1}%
\contentsline {subsubsection}{\numberline {23.3.2}Transfer of Ownership by unique\_ptr}{161}{subsubsection.0.23.3.2}%
\contentsline {subsubsection}{\numberline {23.3.3}Source and Sink}{163}{subsubsection.0.23.3.3}%
\contentsline {subsubsection}{\numberline {23.3.4}unique\_ptrs as Members}{164}{subsubsection.0.23.3.4}%
\contentsline {subsubsection}{\numberline {23.3.5}Dealing with arrays}{164}{subsubsection.0.23.3.5}%
\contentsline {section}{\numberline {24}Three way comparisons (spaceship operator) <compare>}{166}{section.0.24}%
\contentsline {subsection}{\numberline {24.1}Custom <=> logic}{166}{subsection.0.24.1}%
\contentsline {subsection}{\numberline {24.2}Return types}{166}{subsection.0.24.2}%
\contentsline {subsection}{\numberline {24.3}Spaceship on primitive types}{167}{subsection.0.24.3}%
\contentsline {section}{\numberline {25}C++ versions and their additions}{168}{section.0.25}%
