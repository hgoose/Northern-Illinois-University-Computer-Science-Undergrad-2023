\contentsline {section}{\numberline {1}STL Containers}{11}{section.0.1}%
\contentsline {subsection}{\numberline {1.1}STL Vectors}{11}{subsection.0.1.1}%
\contentsline {subsubsection}{\numberline {1.1.1}Implementation}{11}{subsubsection.0.1.1.1}%
\contentsline {subsubsection}{\numberline {1.1.2}Performance in operations on the end}{11}{subsubsection.0.1.1.2}%
\contentsline {subsubsection}{\numberline {1.1.3}Size and capacity}{11}{subsubsection.0.1.1.3}%
\contentsline {subsubsection}{\numberline {1.1.4}Constructors}{12}{subsubsection.0.1.1.4}%
\contentsline {subsubsection}{\numberline {1.1.5}Note about at()}{13}{subsubsection.0.1.1.5}%
\contentsline {subsubsection}{\numberline {1.1.6}Iterator methods}{13}{subsubsection.0.1.1.6}%
\contentsline {subsubsection}{\numberline {1.1.7}Using vectors as 2d arrays}{13}{subsubsection.0.1.1.7}%
\contentsline {subsubsection}{\numberline {1.1.8}For those interested}{15}{subsubsection.0.1.1.8}%
\contentsline {paragraph}{\numberline {1.1.8.1}Manual Dynamic Memory Allocation (Using new)}{15}{paragraph.0.1.1.8.1}%
\contentsline {paragraph}{\numberline {1.1.8.2}Using unique pointer}{15}{paragraph.0.1.1.8.2}%
\contentsline {paragraph}{\numberline {1.1.8.3}Recall: Unique pointer for dynamic arry}{16}{paragraph.0.1.1.8.3}%
\contentsline {paragraph}{\numberline {1.1.8.4}If sizes are truly known at compile time}{17}{paragraph.0.1.1.8.4}%
\contentsline {subsection}{\numberline {1.2}STL Deque}{18}{subsection.0.1.2}%
\contentsline {subsubsection}{\numberline {1.2.1}Implementation}{18}{subsubsection.0.1.2.1}%
\contentsline {subsubsection}{\numberline {1.2.2}Abilities, performance, uses}{18}{subsubsection.0.1.2.2}%
\contentsline {subsubsection}{\numberline {1.2.3}When to use deques}{18}{subsubsection.0.1.2.3}%
\contentsline {subsubsection}{\numberline {1.2.4}Constructors}{19}{subsubsection.0.1.2.4}%
\contentsline {subsection}{\numberline {1.3}STL Lists}{20}{subsection.0.1.3}%
\contentsline {subsubsection}{\numberline {1.3.1}Implementation}{20}{subsubsection.0.1.3.1}%
\contentsline {subsubsection}{\numberline {1.3.2}Abilities}{20}{subsubsection.0.1.3.2}%
\contentsline {subsubsection}{\numberline {1.3.3}Differencs in the methods}{20}{subsubsection.0.1.3.3}%
\contentsline {subsubsection}{\numberline {1.3.4}Constructors}{21}{subsubsection.0.1.3.4}%
\contentsline {subsubsection}{\numberline {1.3.5}Element access}{21}{subsubsection.0.1.3.5}%
\contentsline {subsubsection}{\numberline {1.3.6}Iterator functions}{21}{subsubsection.0.1.3.6}%
\contentsline {subsubsection}{\numberline {1.3.7}Splice Functions and Functions to Change the Order of Elements}{22}{subsubsection.0.1.3.7}%
\contentsline {subsection}{\numberline {1.4}STL Forward lists}{23}{subsection.0.1.4}%
\contentsline {subsubsection}{\numberline {1.4.1}Implementation}{23}{subsubsection.0.1.4.1}%
\contentsline {subsubsection}{\numberline {1.4.2}Abilities, limitations}{23}{subsubsection.0.1.4.2}%
\contentsline {subsubsection}{\numberline {1.4.3}No size()?}{24}{subsubsection.0.1.4.3}%
\contentsline {subsubsection}{\numberline {1.4.4}Similarities to list}{24}{subsubsection.0.1.4.4}%
\contentsline {subsubsection}{\numberline {1.4.5}Constructors}{25}{subsubsection.0.1.4.5}%
\contentsline {subsection}{\numberline {1.5}STL Sets and multisets}{26}{subsection.0.1.5}%
\contentsline {subsubsection}{\numberline {1.5.1}Implementation}{26}{subsubsection.0.1.5.1}%
\contentsline {subsubsection}{\numberline {1.5.2}Strict weak ordering}{26}{subsubsection.0.1.5.2}%
\contentsline {subsubsection}{\numberline {1.5.3}Abilities}{27}{subsubsection.0.1.5.3}%
\contentsline {subsubsection}{\numberline {1.5.4}Changing elements directly, no direct element access}{27}{subsubsection.0.1.5.4}%
\contentsline {subsubsection}{\numberline {1.5.5}Constructors}{27}{subsubsection.0.1.5.5}%
\contentsline {subsubsection}{\numberline {1.5.6}Types}{28}{subsubsection.0.1.5.6}%
\contentsline {subsubsection}{\numberline {1.5.7}Constructors}{29}{subsubsection.0.1.5.7}%
\contentsline {subsection}{\numberline {1.6}STL Maps and multimaps}{30}{subsection.0.1.6}%
\contentsline {subsubsection}{\numberline {1.6.1}Implementation}{30}{subsubsection.0.1.6.1}%
\contentsline {subsubsection}{\numberline {1.6.2}Template parameters}{30}{subsubsection.0.1.6.2}%
\contentsline {subsubsection}{\numberline {1.6.3}Abilities}{30}{subsubsection.0.1.6.3}%
\contentsline {subsubsection}{\numberline {1.6.4}Constructors and types}{31}{subsubsection.0.1.6.4}%
\contentsline {subsubsection}{\numberline {1.6.5}Using maps as associative arrays}{32}{subsubsection.0.1.6.5}%
\contentsline {subsubsection}{\numberline {1.6.6}Constructors}{32}{subsubsection.0.1.6.6}%
\contentsline {subsection}{\numberline {1.7}Example of bounds and equal range}{34}{subsection.0.1.7}%
\contentsline {subsection}{\numberline {1.8}STL Unordered containers}{35}{subsection.0.1.8}%
\contentsline {subsubsection}{\numberline {1.8.1}Implementation}{35}{subsubsection.0.1.8.1}%
\contentsline {subsubsection}{\numberline {1.8.2}Abilities}{35}{subsubsection.0.1.8.2}%
\contentsline {subsubsection}{\numberline {1.8.3}Disadvantages}{36}{subsubsection.0.1.8.3}%
\contentsline {subsection}{\numberline {1.9}STL Containers: Implementations}{37}{subsection.0.1.9}%
\contentsline {subsection}{\numberline {1.10}STL Containers: Iterator Functions}{38}{subsection.0.1.10}%
\contentsline {subsection}{\numberline {1.11}STL containers: Main concepts, differences, uses}{39}{subsection.0.1.11}%
\contentsline {subsection}{\numberline {1.12}STL Containers: Iterator invalidation}{41}{subsection.0.1.12}%
\contentsline {subsection}{\numberline {1.13}STL Containers: Reallocation}{42}{subsection.0.1.13}%
\contentsline {subsection}{\numberline {1.14}STL Containers: Element access}{43}{subsection.0.1.14}%
\contentsline {subsection}{\numberline {1.15}STL Containers: Uses and advantages}{44}{subsection.0.1.15}%
\contentsline {subsection}{\numberline {1.16}STL Iterators}{45}{subsection.0.1.16}%
\contentsline {subsection}{\numberline {1.17}Complexity of container operations}{49}{subsection.0.1.17}%
\contentsline {section}{\numberline {2}STL Algorithms}{50}{section.0.2}%
\contentsline {subsection}{\numberline {2.1}<algorithm>}{50}{subsection.0.2.1}%
\contentsline {subsection}{\numberline {2.2}<numeric>}{51}{subsection.0.2.2}%
\contentsline {subsubsection}{\numberline {2.2.1}transform\_reduce}{51}{subsubsection.0.2.2.1}%
\contentsline {paragraph}{\numberline {2.2.1.1}Unary transform and reduce}{51}{paragraph.0.2.2.1.1}%
\contentsline {paragraph}{\numberline {2.2.1.2}Binary transform and reduce}{52}{paragraph.0.2.2.1.2}%
\contentsline {paragraph}{\numberline {2.2.1.3}std::plus<> and std::multiplies<>}{53}{paragraph.0.2.2.1.3}%
\contentsline {paragraph}{\numberline {2.2.1.4}Other key function objects}{53}{paragraph.0.2.2.1.4}%
\contentsline {section}{\numberline {3}Labels and goto}{55}{section.0.3}%
\contentsline {section}{\numberline {4}Type traits}{56}{section.0.4}%
\contentsline {subsection}{\numberline {4.1}Nonstandard type of types}{56}{subsection.0.4.1}%
\contentsline {subsection}{\numberline {4.2}::value, ::type, and ::value\_type}{57}{subsection.0.4.2}%
\contentsline {section}{\numberline {5}Function Objects}{58}{section.0.5}%
\contentsline {paragraph}{\numberline {5.0.0.1}Why?}{58}{paragraph.0.5.0.0.1}%
\contentsline {paragraph}{\numberline {5.0.0.2}Predefined function objects}{59}{paragraph.0.5.0.0.2}%
\contentsline {section}{\numberline {6}Decltype}{59}{section.0.6}%
\contentsline {subsection}{\numberline {6.1}Syntax}{59}{subsection.0.6.1}%
\contentsline {subsection}{\numberline {6.2}Example}{60}{subsection.0.6.2}%
\contentsline {subsection}{\numberline {6.3}Things to pair with decltype}{60}{subsection.0.6.3}%
\contentsline {section}{\numberline {7}Constexpr}{61}{section.0.7}%
\contentsline {subsection}{\numberline {7.1}Variables}{61}{subsection.0.7.1}%
\contentsline {subsection}{\numberline {7.2}Functions}{61}{subsection.0.7.2}%
\contentsline {subsection}{\numberline {7.3}Object Constructors}{62}{subsection.0.7.3}%
\contentsline {subsection}{\numberline {7.4}constexpr vs const}{62}{subsection.0.7.4}%
\contentsline {section}{\numberline {8}Function pointers and callable parametrs}{63}{section.0.8}%
\contentsline {subsection}{\numberline {8.1}Function pointers}{63}{subsection.0.8.1}%
\contentsline {subsubsection}{\numberline {8.1.1}As types}{63}{subsubsection.0.8.1.1}%
\contentsline {subsubsection}{\numberline {8.1.2}As function paramater}{63}{subsubsection.0.8.1.2}%
\contentsline {subsubsection}{\numberline {8.1.3}Function pointers to member functions}{64}{subsubsection.0.8.1.3}%
\contentsline {subsection}{\numberline {8.2}Using std::function}{65}{subsection.0.8.2}%
\contentsline {subsection}{\numberline {8.3}With forwarding references}{65}{subsection.0.8.3}%
\contentsline {section}{\numberline {9}Templates}{66}{section.0.9}%
\contentsline {subsection}{\numberline {9.1}Template Function}{66}{subsection.0.9.1}%
\contentsline {subsection}{\numberline {9.2}Template Class}{67}{subsection.0.9.2}%
\contentsline {subsection}{\numberline {9.3}Class vs typename keyword}{67}{subsection.0.9.3}%
\contentsline {subsection}{\numberline {9.4}Handle friend functions}{67}{subsection.0.9.4}%
\contentsline {subsubsection}{\numberline {9.4.1}Friendship to a Non-Template Function}{67}{subsubsection.0.9.4.1}%
\contentsline {subsubsection}{\numberline {9.4.2}Friendship to a Template Function}{68}{subsubsection.0.9.4.2}%
\contentsline {subsection}{\numberline {9.5}Function Template Specialization}{70}{subsection.0.9.5}%
\contentsline {subsection}{\numberline {9.6}Class/Struct Template Specialization}{70}{subsection.0.9.6}%
\contentsline {subsection}{\numberline {9.7}Template Parameters}{70}{subsection.0.9.7}%
\contentsline {subsection}{\numberline {9.8}Trailing return type}{70}{subsection.0.9.8}%
\contentsline {subsubsection}{\numberline {9.8.1}Syntax}{71}{subsubsection.0.9.8.1}%
\contentsline {subsubsection}{\numberline {9.8.2}Example}{71}{subsubsection.0.9.8.2}%
\contentsline {subsection}{\numberline {9.9}Template functions with mixed types (Trailing return type)}{71}{subsection.0.9.9}%
\contentsline {subsection}{\numberline {9.10}Template functions with mixed types (Deduced return type)}{72}{subsection.0.9.10}%
\contentsline {subsection}{\numberline {9.11}Dependent name resolution}{72}{subsection.0.9.11}%
\contentsline {subsubsection}{\numberline {9.11.1}Dependent names}{72}{subsubsection.0.9.11.1}%
\contentsline {subsubsection}{\numberline {9.11.2}Typename Keyword}{72}{subsubsection.0.9.11.2}%
\contentsline {subsubsection}{\numberline {9.11.3}Nested types}{73}{subsubsection.0.9.11.3}%
\contentsline {subsubsection}{\numberline {9.11.4}Prereq: Using aliases defined in classes}{73}{subsubsection.0.9.11.4}%
\contentsline {subsubsection}{\numberline {9.11.5}Type Aliases}{74}{subsubsection.0.9.11.5}%
\contentsline {subsubsection}{\numberline {9.11.6}Return Types in Template Functions}{75}{subsubsection.0.9.11.6}%
\contentsline {subsubsection}{\numberline {9.11.7}Base Class Members}{75}{subsubsection.0.9.11.7}%
\contentsline {subsubsection}{\numberline {9.11.8}Dependent Types in Expressions}{75}{subsubsection.0.9.11.8}%
\contentsline {subsection}{\numberline {9.12}Variadic templates with functions}{75}{subsection.0.9.12}%
\contentsline {subsection}{\numberline {9.13}Left vs right folds}{79}{subsection.0.9.13}%
\contentsline {subsection}{\numberline {9.14}Parentheses in fold expressions}{80}{subsection.0.9.14}%
\contentsline {subsection}{\numberline {9.15}Pack size}{80}{subsection.0.9.15}%
\contentsline {subsection}{\numberline {9.16}Function calls in fold expressions}{81}{subsection.0.9.16}%
\contentsline {subsection}{\numberline {9.17}Variadic templates with classes}{82}{subsection.0.9.17}%
\contentsline {subsection}{\numberline {9.18}std::forward}{84}{subsection.0.9.18}%
\contentsline {subsubsection}{\numberline {9.18.1}Key Differences Between std::forward and std::move}{84}{subsubsection.0.9.18.1}%
\contentsline {subsection}{\numberline {9.19}Universal reference (forwarding reference)}{86}{subsection.0.9.19}%
\contentsline {subsection}{\numberline {9.20}Concepts}{87}{subsection.0.9.20}%
\contentsline {section}{\numberline {10}More on the comma operator}{89}{section.0.10}%
\contentsline {section}{\numberline {11}More on Lambdas}{90}{section.0.11}%
\contentsline {subsection}{\numberline {11.1}Auto in lambda args}{90}{subsection.0.11.1}%
\contentsline {subsection}{\numberline {11.2}Template lambdas}{90}{subsection.0.11.2}%
\contentsline {subsection}{\numberline {11.3}Recursive lambdas}{91}{subsection.0.11.3}%
\contentsline {section}{\numberline {12}When initializer lists are required}{92}{section.0.12}%
\contentsline {section}{\numberline {13}Inheritence and Subtype Polymorphism}{93}{section.0.13}%
\contentsline {subsection}{\numberline {13.1}OOP Main Concepts}{93}{subsection.0.13.1}%
\contentsline {subsection}{\numberline {13.2}Object Relationships}{93}{subsection.0.13.2}%
\contentsline {subsection}{\numberline {13.3}Ineritance}{94}{subsection.0.13.3}%
\contentsline {subsection}{\numberline {13.4}Inheritance and Member Access}{94}{subsection.0.13.4}%
\contentsline {subsection}{\numberline {13.5}Inheritance Syntax}{95}{subsection.0.13.5}%
\contentsline {subsection}{\numberline {13.6}Upcasting and Downcasting}{96}{subsection.0.13.6}%
\contentsline {subsection}{\numberline {13.7}More on Downcasting}{97}{subsection.0.13.7}%
\contentsline {subsubsection}{\numberline {13.7.1}What Happens Without Virtual Functions}{98}{subsubsection.0.13.7.1}%
\contentsline {subsubsection}{\numberline {13.7.2}Downcasting example}{99}{subsubsection.0.13.7.2}%
\contentsline {subsubsection}{\numberline {13.7.3}Base class pointer example}{100}{subsubsection.0.13.7.3}%
\contentsline {subsection}{\numberline {13.8}Object Slicing}{100}{subsection.0.13.8}%
\contentsline {subsection}{\numberline {13.9}Multiple Inheritance}{102}{subsection.0.13.9}%
\contentsline {subsubsection}{\numberline {13.9.1}Why Use Multiple Inheritance?}{102}{subsubsection.0.13.9.1}%
\contentsline {subsubsection}{\numberline {13.9.2}Example}{102}{subsubsection.0.13.9.2}%
\contentsline {subsubsection}{\numberline {13.9.3}Issues with Multiple Inheritance}{103}{subsubsection.0.13.9.3}%
\contentsline {subsection}{\numberline {13.10}Virtual inheritance}{104}{subsection.0.13.10}%
\contentsline {subsubsection}{\numberline {13.10.1}The Diamond Problem}{104}{subsubsection.0.13.10.1}%
\contentsline {subsubsection}{\numberline {13.10.2}Solution with Virtual Inheritance}{105}{subsubsection.0.13.10.2}%
\contentsline {subsection}{\numberline {13.11}Subtype Polymorphism}{105}{subsection.0.13.11}%
\contentsline {subsection}{\numberline {13.12}Declaring Virtual Member Functions}{106}{subsection.0.13.12}%
\contentsline {subsubsection}{\numberline {13.12.1}The override keyword}{106}{subsubsection.0.13.12.1}%
\contentsline {subsection}{\numberline {13.13}Abstract or Pure virtual Member Functions}{107}{subsection.0.13.13}%
\contentsline {subsection}{\numberline {13.14}Abstract Classes}{107}{subsection.0.13.14}%
\contentsline {subsection}{\numberline {13.15}Interface Inheritance}{108}{subsection.0.13.15}%
\contentsline {section}{\numberline {14}<regex.h> Pattern Matching and String Validation}{109}{section.0.14}%
\contentsline {subsection}{\numberline {14.1}regcomp}{109}{subsection.0.14.1}%
\contentsline {subsubsection}{\numberline {14.1.1}Signature}{109}{subsubsection.0.14.1.1}%
\contentsline {subsubsection}{\numberline {14.1.2}Return value}{109}{subsubsection.0.14.1.2}%
\contentsline {subsubsection}{\numberline {14.1.3}Return errors}{109}{subsubsection.0.14.1.3}%
\contentsline {subsubsection}{\numberline {14.1.4}Flags}{110}{subsubsection.0.14.1.4}%
\contentsline {subsection}{\numberline {14.2}Regexec}{110}{subsection.0.14.2}%
\contentsline {subsubsection}{\numberline {14.2.1}Signature}{111}{subsubsection.0.14.2.1}%
\contentsline {subsubsection}{\numberline {14.2.2}Return value}{111}{subsubsection.0.14.2.2}%
\contentsline {subsection}{\numberline {14.3}Regerror}{111}{subsection.0.14.3}%
\contentsline {subsubsection}{\numberline {14.3.1}Signature}{111}{subsubsection.0.14.3.1}%
\contentsline {subsubsection}{\numberline {14.3.2}Return value}{112}{subsubsection.0.14.3.2}%
\contentsline {subsection}{\numberline {14.4}Regfree}{112}{subsection.0.14.4}%
\contentsline {subsubsection}{\numberline {14.4.1}Signature}{112}{subsubsection.0.14.4.1}%
\contentsline {subsection}{\numberline {14.5}regmatch\_t and pmatch}{113}{subsection.0.14.5}%
\contentsline {subsubsection}{\numberline {14.5.1}regmatch\_t}{113}{subsubsection.0.14.5.1}%
\contentsline {subsubsection}{\numberline {14.5.2}pmatch array}{114}{subsubsection.0.14.5.2}%
\contentsline {subsection}{\numberline {14.6}Regex Example}{114}{subsection.0.14.6}%
\contentsline {section}{\numberline {15}Structured bindings}{117}{section.0.15}%
\contentsline {subsection}{\numberline {15.1}As unpacks}{117}{subsection.0.15.1}%
\contentsline {subsection}{\numberline {15.2}With returning}{117}{subsection.0.15.2}%
\contentsline {subsection}{\numberline {15.3}With structs and classes}{118}{subsection.0.15.3}%
\contentsline {subsection}{\numberline {15.4}With maps}{118}{subsection.0.15.4}%
\contentsline {section}{\numberline {16}Attributes in c++}{119}{section.0.16}%
\contentsline {subsection}{\numberline {16.1}General Attributes}{119}{subsection.0.16.1}%
\contentsline {section}{\numberline {17}Inline functions}{122}{section.0.17}%
\contentsline {section}{\numberline {18}Advanced iterator usage}{123}{section.0.18}%
\contentsline {subsection}{\numberline {18.1}base()}{123}{subsection.0.18.1}%
\contentsline {section}{\numberline {19}Regular expressions in c++}{124}{section.0.19}%
\contentsline {subsection}{\numberline {19.1}Basic components}{124}{subsection.0.19.1}%
\contentsline {subsubsection}{\numberline {19.1.1}The regex object}{124}{subsubsection.0.19.1.1}%
\contentsline {subsubsection}{\numberline {19.1.2}The smatch array}{124}{subsubsection.0.19.1.2}%
\contentsline {subsubsection}{\numberline {19.1.3}regex\_match}{125}{subsubsection.0.19.1.3}%
\contentsline {subsubsection}{\numberline {19.1.4}regex\_search}{125}{subsubsection.0.19.1.4}%
\contentsline {subsubsection}{\numberline {19.1.5}regex\_replace}{127}{subsubsection.0.19.1.5}%
\contentsline {subsection}{\numberline {19.2}match\_results}{127}{subsection.0.19.2}%
\contentsline {subsubsection}{\numberline {19.2.1}Methods}{127}{subsubsection.0.19.2.1}%
\contentsline {subsection}{\numberline {19.3}sub\_match}{128}{subsection.0.19.3}%
\contentsline {subsection}{\numberline {19.4}Passing string iterators}{129}{subsection.0.19.4}%
\contentsline {subsubsection}{\numberline {19.4.1}Getting all matches}{129}{subsubsection.0.19.4.1}%
\contentsline {subsection}{\numberline {19.5}smatch prefix and suffix}{130}{subsection.0.19.5}%
\contentsline {section}{\numberline {20}Standard namespace}{132}{section.0.20}%
\contentsline {subsection}{\numberline {20.1}std::bind}{132}{subsection.0.20.1}%
\contentsline {subsubsection}{\numberline {20.1.1}std::placeholders}{132}{subsubsection.0.20.1.1}%
\contentsline {subsubsection}{\numberline {20.1.2}Using std::ref with bind}{133}{subsubsection.0.20.1.2}%
\contentsline {subsection}{\numberline {20.2}std::invoke}{134}{subsection.0.20.2}%
\contentsline {subsubsection}{\numberline {20.2.1}Calling a regular function}{134}{subsubsection.0.20.2.1}%
\contentsline {subsubsection}{\numberline {20.2.2}Calling a member function}{134}{subsubsection.0.20.2.2}%
\contentsline {subsubsection}{\numberline {20.2.3}Accessing a member variable}{135}{subsubsection.0.20.2.3}%
\contentsline {subsubsection}{\numberline {20.2.4}Calling a lambda}{135}{subsubsection.0.20.2.4}%
\contentsline {subsection}{\numberline {20.3}std::exchange}{136}{subsection.0.20.3}%
\contentsline {subsection}{\numberline {20.4}std::swap}{137}{subsection.0.20.4}%
\contentsline {subsection}{\numberline {20.5}std::get}{138}{subsection.0.20.5}%
\contentsline {subsection}{\numberline {20.6}std::tuple}{139}{subsection.0.20.6}%
\contentsline {subsubsection}{\numberline {20.6.1}std::tuple and std::make\_tuple}{139}{subsubsection.0.20.6.1}%
\contentsline {subsubsection}{\numberline {20.6.2}Modifying elements}{139}{subsubsection.0.20.6.2}%
\contentsline {subsubsection}{\numberline {20.6.3}std::tuple\_size}{139}{subsubsection.0.20.6.3}%
\contentsline {subsubsection}{\numberline {20.6.4}Unpacking with std::tie}{140}{subsubsection.0.20.6.4}%
\contentsline {subsubsection}{\numberline {20.6.5}std::tie with std::ignore}{140}{subsubsection.0.20.6.5}%
\contentsline {subsubsection}{\numberline {20.6.6}std::optional <optional>}{140}{subsubsection.0.20.6.6}%
\contentsline {subsubsection}{\numberline {20.6.7}std::expected <expected>}{141}{subsubsection.0.20.6.7}%
\contentsline {subsubsection}{\numberline {20.6.8}std::format <format>}{141}{subsubsection.0.20.6.8}%
\contentsline {subsection}{\numberline {20.7}std::bitset <bitset>}{141}{subsection.0.20.7}%
\contentsline {subsubsection}{\numberline {20.7.1}Operations on bitset}{142}{subsubsection.0.20.7.1}%
\contentsline {section}{\numberline {21}Views and Ranges}{144}{section.0.21}%
\contentsline {subsection}{\numberline {21.1}Views}{144}{subsection.0.21.1}%
\contentsline {subsubsection}{\numberline {21.1.1}Filter and transform}{144}{subsubsection.0.21.1.1}%
\contentsline {subsubsection}{\numberline {21.1.2}Iota}{145}{subsubsection.0.21.1.2}%
\contentsline {subsubsection}{\numberline {21.1.3}Take and drop}{145}{subsubsection.0.21.1.3}%
\contentsline {subsection}{\numberline {21.2}The ranges library}{145}{subsection.0.21.2}%
\contentsline {subsection}{\numberline {21.3}std::span}{145}{subsection.0.21.3}%
\contentsline {subsubsection}{\numberline {21.3.1}What does it mean to be "non-owning"}{146}{subsubsection.0.21.3.1}%
\contentsline {subsubsection}{\numberline {21.3.2}subspans}{146}{subsubsection.0.21.3.2}%
\contentsline {subsubsection}{\numberline {21.3.3}Key member functions}{147}{subsubsection.0.21.3.3}%
\contentsline {section}{\numberline {22}constexpr, consteval, and constinit}{148}{section.0.22}%
\contentsline {subsection}{\numberline {22.1}constexpr Objects}{148}{subsection.0.22.1}%
\contentsline {subsection}{\numberline {22.2}More on constexpr variables}{149}{subsection.0.22.2}%
\contentsline {subsection}{\numberline {22.3}When const Can Make a Compile-Time Constant}{149}{subsection.0.22.3}%
\contentsline {subsection}{\numberline {22.4}if constexpr}{150}{subsection.0.22.4}%
\contentsline {subsection}{\numberline {22.5}Is constexpr const}{151}{subsection.0.22.5}%
\contentsline {subsection}{\numberline {22.6}consteval}{151}{subsection.0.22.6}%
\contentsline {subsection}{\numberline {22.7}constinit}{153}{subsection.0.22.7}%
\contentsline {subsection}{\numberline {22.8}constexpr and consteval functions are implicitly inline}{153}{subsection.0.22.8}%
\contentsline {section}{\numberline {23}Smart pointers}{154}{section.0.23}%
\contentsline {subsection}{\numberline {23.1}Class shared\_ptr}{155}{subsection.0.23.1}%
\contentsline {subsubsection}{\numberline {23.1.1}Using Class shared\_ptr}{155}{subsubsection.0.23.1.1}%
\contentsline {subsubsection}{\numberline {23.1.2}Defining a Deleter}{157}{subsubsection.0.23.1.2}%
\contentsline {subsubsection}{\numberline {23.1.3}Dealing with Arrays}{158}{subsubsection.0.23.1.3}%
\contentsline {subsubsection}{\numberline {23.1.4}More on make\_shared}{159}{subsubsection.0.23.1.4}%
\contentsline {subsubsection}{\numberline {23.1.5}Understanding the reference count}{160}{subsubsection.0.23.1.5}%
\contentsline {subsubsection}{\numberline {23.1.6}Cyclic references}{161}{subsubsection.0.23.1.6}%
\contentsline {subsubsection}{\numberline {23.1.7}Practical use of owner\_before()}{162}{subsubsection.0.23.1.7}%
\contentsline {subsection}{\numberline {23.2}Class weak\_ptr}{163}{subsection.0.23.2}%
\contentsline {subsubsection}{\numberline {23.2.1}Using a weak\_ptr}{164}{subsubsection.0.23.2.1}%
\contentsline {subsection}{\numberline {23.3}Unique\_ptr}{165}{subsection.0.23.3}%
\contentsline {subsubsection}{\numberline {23.3.1}Using a unique\_ptr}{166}{subsubsection.0.23.3.1}%
\contentsline {subsubsection}{\numberline {23.3.2}Transfer of Ownership by unique\_ptr}{167}{subsubsection.0.23.3.2}%
\contentsline {subsubsection}{\numberline {23.3.3}Source and Sink}{168}{subsubsection.0.23.3.3}%
\contentsline {subsubsection}{\numberline {23.3.4}unique\_ptrs as Members}{169}{subsubsection.0.23.3.4}%
\contentsline {subsubsection}{\numberline {23.3.5}Dealing with arrays}{170}{subsubsection.0.23.3.5}%
\contentsline {subsubsection}{\numberline {23.3.6}Double ownership}{171}{subsubsection.0.23.3.6}%
\contentsline {subsection}{\numberline {23.4}Smart pointers to stack memory?}{172}{subsection.0.23.4}%
\contentsline {section}{\numberline {24}Three way comparisons (spaceship operator) <compare>}{173}{section.0.24}%
\contentsline {subsection}{\numberline {24.1}Custom <=> logic}{173}{subsection.0.24.1}%
\contentsline {subsection}{\numberline {24.2}Return types}{173}{subsection.0.24.2}%
\contentsline {subsection}{\numberline {24.3}Spaceship on primitive types}{174}{subsection.0.24.3}%
\contentsline {section}{\numberline {25}Single Dispatch and Overload Resolution}{175}{section.0.25}%
\contentsline {subsection}{\numberline {25.1}Single dispatch}{175}{subsection.0.25.1}%
\contentsline {subsection}{\numberline {25.2}Overload resolution (compile time)}{175}{subsection.0.25.2}%
\contentsline {section}{\numberline {26}Bitfields}{176}{section.0.26}%
\contentsline {subsubsection}{\numberline {26.0.1}Address operator on a bitfield?}{177}{subsubsection.0.26.0.1}%
\contentsline {section}{\numberline {27}Ref qualifiers}{178}{section.0.27}%
\contentsline {section}{\numberline {28}Understanding function types}{179}{section.0.28}%
\contentsline {subsection}{\numberline {28.1}free functions}{179}{subsection.0.28.1}%
\contentsline {section}{\numberline {29}Covariant return types}{180}{section.0.29}%
\contentsline {subsection}{\numberline {29.1}Rules for Covariant Return Types}{180}{subsection.0.29.1}%
\contentsline {subsection}{\numberline {29.2}Why Use Covariant Return Types?}{180}{subsection.0.29.2}%
\contentsline {section}{\numberline {30}declval}{181}{section.0.30}%
\contentsline {section}{\numberline {31}Value Categories}{182}{section.0.31}%
\contentsline {subsection}{\numberline {31.1}Lvalue (Locator Value)}{182}{subsection.0.31.1}%
\contentsline {subsection}{\numberline {31.2}Rvalue (Right Value)}{182}{subsection.0.31.2}%
\contentsline {subsection}{\numberline {31.3}Xvalue (Expiring Value)}{182}{subsection.0.31.3}%
\contentsline {subsubsection}{\numberline {31.3.1}Why Does an Xvalue Have a Memory Address?}{183}{subsubsection.0.31.3.1}%
\contentsline {subsection}{\numberline {31.4}PRvalue (Pure Rvalue)}{183}{subsection.0.31.4}%
\contentsline {subsection}{\numberline {31.5}Glvalue (Generalized Lvalue)}{183}{subsection.0.31.5}%
\contentsline {subsection}{\numberline {31.6}Summary}{184}{subsection.0.31.6}%
\contentsline {section}{\numberline {32}Deleting functions}{185}{section.0.32}%
\contentsline {subsection}{\numberline {32.1}Deleting all non-matching overloads }{185}{subsection.0.32.1}%
\contentsline {section}{\numberline {33}Copy elision}{186}{section.0.33}%
\contentsline {section}{\numberline {34}User defined literals}{187}{section.0.34}%
\contentsline {subsubsection}{\numberline {34.0.1}Why unsigned long long and long double?}{187}{subsubsection.0.34.0.1}%
\contentsline {section}{\numberline {35}C++ versions and their additions}{188}{section.0.35}%
