********************************************************************************
* test3 - test your BST deletion functions on known trees
********************************************************************************
* Tests run with a non-empty, known binary search tree
********************************************************************************
     START    REMOVED 1  REMOVED 6  REMOVED 5  REMOVED 7  REMOVED 2  REMOVED 3
       5          5          5          7          3          3          4    
      / \        / \        / \        /          / \          \   
     3   6      3   6      3   7      3          2   4          4  
    / \   \    / \   \    / \        / \   
   2   4   7  2   4   7  2   4      2   4  
  /  
 1   
Tree, no changes
  preorder:   5 3 2 1 4 6 7 
  inorder:    1 2 3 4 5 6 7 
  postorder:  1 2 4 3 7 6 5 
  levelorder: 5 3 6 2 4 7 1 
  count: 7; root: 5; min: 1; max: 7; height: 3; is_bst: true
  successor test from min:   1 2 3 4 5 6 7 

Removing node 1, which has no children.
  preorder:   5 3 2 4 6 7 
  inorder:    2 3 4 5 6 7 
  postorder:  2 4 3 7 6 5 
  levelorder: 5 3 6 2 4 7 
  count: 6; root: 5; min: 2; max: 7; height: 2; is_bst: true
  successor test from min:   2 3 4 5 6 7 

Removing node 6, which has one child to right.
  preorder:   5 3 2 4 7 
  inorder:    2 3 4 5 7 
  postorder:  2 4 3 7 5 
  levelorder: 5 3 7 2 4 
  count: 5; root: 5; min: 2; max: 7; height: 2; is_bst: true
  successor test from min:   2 3 4 5 7 

Removing root node, 5, which has two children.
  preorder:   7 3 2 4 
  inorder:    2 3 4 7 
  postorder:  2 4 3 7 
  levelorder: 7 3 2 4 
  count: 4; root: 7; min: 2; max: 7; height: 2; is_bst: true
  successor test from min:   2 3 4 7 

Removing root node, 7, which has one child on left.
  preorder:   3 2 4 
  inorder:    2 3 4 
  postorder:  2 4 3 
  levelorder: 3 2 4 
  count: 3; root: 3; min: 2; max: 4; height: 1; is_bst: true
  successor test from min:   2 3 4 

Removing root's left child, 2, which has no children.
  preorder:   3 4 
  inorder:    3 4 
  postorder:  4 3 
  levelorder: 3 4 
  count: 2; root: 3; min: 3; max: 4; height: 1; is_bst: true
  successor test from min:   3 4 

Removing root node, 3, which has one child on right.
  preorder:   4 
  inorder:    4 
  postorder:  4 
  levelorder: 4 
  count: 1; root: 4; min: 4; max: 4; height: 0; is_bst: true
  successor test from min:   4 

Trying to remove 125 (not there) - don't crash, tree shouldn't change
  preorder:   4 
  inorder:    4 
  postorder:  4 
  levelorder: 4 
  count: 1; root: 4; min: 4; max: 4; height: 0; is_bst: true
  successor test from min:   4 

********************************************************************************
* Testing your functions on an empty tree -- make sure they don't crash
********************************************************************************
Trying to remove node with 420 from empty tree (crash check)
bst_remove did not crash, printing stats:
  preorder:   
  inorder:    
  postorder:  
  levelorder: 
  count: 0; root: none; min: none; max: none; height: -1; is_bst: true

