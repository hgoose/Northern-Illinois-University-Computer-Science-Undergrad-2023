Loading graph from file "input/nodijkstra.graph"
Found 6 vertices:
  vertex index=0, label=A
  vertex index=1, label=B
  vertex index=2, label=C
  vertex index=3, label=D
  vertex index=4, label=E
  vertex index=5, label=F

Found 10 edges:
  edge origin=A(0), dest=B(1), weight=2
  edge origin=A(0), dest=D(3), weight=-5
  edge origin=A(0), dest=E(4), weight=4
  edge origin=B(1), dest=C(2), weight=-8
  edge origin=B(1), dest=E(4), weight=1
  edge origin=B(1), dest=F(5), weight=5
  edge origin=C(2), dest=E(4), weight=1
  edge origin=C(2), dest=F(5), weight=2
  edge origin=D(3), dest=E(4), weight=2
  edge origin=E(4), dest=F(5), weight=1

  g.nvertices() = 6
  g.nedges() = 10
  Printing undirected adjacency list:
    0, label=A, index=0: [B(1):2] [D(3):-5] [E(4):4] 
    1, label=B, index=1: [A(0):2] [C(2):-8] [E(4):1] [F(5):5] 
    2, label=C, index=2: [B(1):-8] [E(4):1] [F(5):2] 
    3, label=D, index=3: [A(0):-5] [E(4):2] 
    4, label=E, index=4: [A(0):4] [B(1):1] [C(2):1] [D(3):2] [F(5):1] 
    5, label=F, index=5: [B(1):5] [C(2):2] [E(4):1] 

  Printing out-adjacency list:
    0, label=A, index=0: [B(1):2] [D(3):-5] [E(4):4] 
    1, label=B, index=1: [C(2):-8] [E(4):1] [F(5):5] 
    2, label=C, index=2: [E(4):1] [F(5):2] 
    3, label=D, index=3: [E(4):2] 
    4, label=E, index=4: [F(5):1] 
    5, label=F, index=5: 

  Printing in-adjacency list:
    0, label=A, index=0: 
    1, label=B, index=1: [A(0):2] 
    2, label=C, index=2: [B(1):-8] 
    3, label=D, index=3: [A(0):-5] 
    4, label=E, index=4: [A(0):4] [B(1):1] [C(2):1] [D(3):2] 
    5, label=F, index=5: [B(1):5] [C(2):2] [E(4):1] 

  Unweighted Adjacency Matrix
  0 1 0 1 1 0 
  0 0 1 0 1 1 
  0 0 0 0 1 1 
  0 0 0 0 1 0 
  0 0 0 0 0 1 
  0 0 0 0 0 0 

  Weighted Adjacency Matrix
    inf     2   inf    -5     4   inf 
    inf   inf    -8   inf     1     5 
    inf   inf   inf   inf     1     2 
    inf   inf   inf   inf     2   inf 
    inf   inf   inf   inf   inf     1 
    inf   inf   inf   inf   inf   inf 

  Depth first (connected only): [A(0)] [B(1)] [C(2)] [E(4)] [F(5)] [D(3)] 
  Depth first traversal (all):  [A(0)] [B(1)] [C(2)] [E(4)] [F(5)] [D(3)] 

  Breadth first (connected only): [A(0)] [B(1)] [D(3)] [E(4)] [C(2)] [F(5)] 
  Breadth first traversal (all):  [A(0)] [B(1)] [D(3)] [E(4)] [C(2)] [F(5)] 

  Topological sort: [A(0)] [B(1)] [C(2)] [D(3)] [E(4)] [F(5)] 

Dijkstra's Shortest Path from source A(0)
Error: Dijkstra's algorithm does not support graphs with negative edge weights.
  Dijkstra's returned no results. This could have been caused by a graph with no vertices, or by negative edge weights.

Dijkstra's Shortest Path from source B(1)
Error: Dijkstra's algorithm does not support graphs with negative edge weights.
  Dijkstra's returned no results. This could have been caused by a graph with no vertices, or by negative edge weights.

Dijkstra's Shortest Path from source C(2)
Error: Dijkstra's algorithm does not support graphs with negative edge weights.
  Dijkstra's returned no results. This could have been caused by a graph with no vertices, or by negative edge weights.

Dijkstra's Shortest Path from source D(3)
Error: Dijkstra's algorithm does not support graphs with negative edge weights.
  Dijkstra's returned no results. This could have been caused by a graph with no vertices, or by negative edge weights.

Dijkstra's Shortest Path from source E(4)
Error: Dijkstra's algorithm does not support graphs with negative edge weights.
  Dijkstra's returned no results. This could have been caused by a graph with no vertices, or by negative edge weights.

Dijkstra's Shortest Path from source F(5)
Error: Dijkstra's algorithm does not support graphs with negative edge weights.
  Dijkstra's returned no results. This could have been caused by a graph with no vertices, or by negative edge weights.

