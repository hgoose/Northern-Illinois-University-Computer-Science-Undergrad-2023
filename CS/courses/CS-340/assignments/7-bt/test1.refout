********************************************************************************
* test1 - Test your algorithms on a known tree
*
*   If your traversals work, they should generate the same output you see in
* the "expect" lines. 
*
*   If delete_tree works, then there should be nothing left allocated on the
* heap at the end of your program. This will be checked with a tool called
* valgrind, which you can run with: 
*    valgrind ./test1
********************************************************************************

********************************************************************************
* PRICELESS ASCII ART
********************************************************************************
             Non-Binary Tree           Binary Version   

        .--------.--[a]--.------.           [a]         
        |        |       |      |          /            
  .----[b]----. [c]     [d]    [e]      [b]             
  |     |     |                        /   \            
 [f] .-[g]-. [h]                    [f]     [c]         
     |     |                           \       \        
    [i]   [j]                           [g]     [d]     
                                       /   \       \    
                                    [i]     [h]     [e] 
                                       \                
                                        [j]             

********************************************************************************
* TESTING YOUR TRAVERSAL ALGORITHMS
********************************************************************************
         preorder: a b f g i j h c d e 
           expect: a b f g i j h c d e

          inorder: f i j g h b c d e a 
           expect: f i j g h b c d e a

        postorder: j i h g f e d c b a 
           expect: j i h g f e d c b a

       levelorder: a b f c g d i h e j 
           expect: a b f c g d i h e j

tilted_levelorder: a b c d e f g h i j 
           expect: a b c d e f g h i j

********************************************************************************
* TESTING YOUR tilted_find_parent FUNCTION
********************************************************************************
  Node="a", normal parent="nullptr" (nullptr), tilted parent="nullptr" (nullptr) GOOD
  Node="b", normal parent="a" (a), tilted parent="a" (a) GOOD
  Node="c", normal parent="b" (b), tilted parent="a" (a) GOOD
  Node="d", normal parent="c" (c), tilted parent="a" (a) GOOD
  Node="e", normal parent="d" (d), tilted parent="a" (a) GOOD
  Node="f", normal parent="b" (b), tilted parent="b" (b) GOOD
  Node="g", normal parent="f" (f), tilted parent="b" (b) GOOD
  Node="h", normal parent="g" (g), tilted parent="b" (b) GOOD
  Node="i", normal parent="g" (g), tilted parent="g" (g) GOOD
  Node="j", normal parent="i" (i), tilted parent="g" (g) GOOD

********************************************************************************
* TESTING YOUR tilted_get_children FUNCTION
********************************************************************************
  Children of node "a"; expect: { b c d e }
                           got: { b c d e } GOOD

  Children of node "b"; expect: { f g h }
                           got: { f g h } GOOD

  Children of node "c"; expect: { }
                           got: { } GOOD

  Children of node "d"; expect: { }
                           got: { } GOOD

  Children of node "e"; expect: { }
                           got: { } GOOD

  Children of node "f"; expect: { }
                           got: { } GOOD

  Children of node "g"; expect: { i j }
                           got: { i j } GOOD

  Children of node "h"; expect: { }
                           got: { } GOOD

  Children of node "i"; expect: { }
                           got: { } GOOD

  Children of node "j"; expect: { }
                           got: { } GOOD

