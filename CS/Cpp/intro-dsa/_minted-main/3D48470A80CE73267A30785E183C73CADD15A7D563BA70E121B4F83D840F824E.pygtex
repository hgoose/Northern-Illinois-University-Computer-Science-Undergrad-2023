\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8\relax}]
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}cctype\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}inpost.h\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}mystack.h\PYGZdq{}}
\PYG{n}{std}\PYG{o}{::}\PYG{n}{string}\PYG{+w}{ }\PYG{n+nf}{convert}\PYG{p}{(}\PYG{k}{const}\PYG{+w}{ }\PYG{n}{std}\PYG{o}{::}\PYG{n}{string}\PYG{o}{\PYGZam{}}\PYG{+w}{ }\PYG{n}{infix}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{mystack}\PYG{+w}{ }\PYG{n}{stack}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Create a stack for characters}
\PYG{+w}{    }\PYG{n}{std}\PYG{o}{::}\PYG{n}{string}\PYG{+w}{ }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}\PYGZdq{}}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Create the return string}
\PYG{+w}{    }\PYG{c+c1}{// Step through the infix string}
\PYG{+w}{    }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k}{auto}\PYG{+w}{ }\PYG{n}{it}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{infix}\PYG{p}{.}\PYG{n}{c\PYGZus{}str}\PYG{p}{();}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{it}\PYG{p}{;}\PYG{+w}{ }\PYG{o}{++}\PYG{n}{it}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{c+c1}{// Check if the character is lowercase}
\PYG{+w}{        }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{islower}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{))}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{c+c1}{// Append the current infix character to the return string}
\PYG{+w}{            }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{it}\PYG{p}{;}
\PYG{+w}{            }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{} \PYGZsq{}}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{continue}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Proceed to the next infix character}

\PYG{+w}{        }\PYG{c+c1}{// Check if the character is a digit}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{isdigit}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{))}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{c+c1}{// Keep going to get all the consecutive digits}
\PYG{+w}{            }\PYG{k}{while}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{isdigit}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{))}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{it}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Append to the return string}
\PYG{+w}{                }\PYG{o}{++}\PYG{n}{it}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Proceed to the next character}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{} \PYGZsq{}}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Tack on a space}
\PYG{+w}{            }\PYG{o}{\PYGZhy{}\PYGZhy{}}\PYG{n}{it}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Handle the extraneous increment}

\PYG{+w}{        }\PYG{c+c1}{// Check if the character is a space}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{isspace}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{))}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{k}{continue}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Proceed to the next infix character}

\PYG{+w}{        }\PYG{c+c1}{// Check if the character is a left parenthesis}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}(\PYGZsq{}}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{push}\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// Push the current infix character onto the stack}
\PYG{+w}{            }\PYG{k}{continue}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Proceed to the next infix character}

\PYG{+w}{        }\PYG{c+c1}{// Check if the character is a right parenthesis}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{o}{*}\PYG{n}{it}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{})\PYGZsq{}}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{c+c1}{// Loop while the stack is not empty and the character at the top of the stack is not a left parenthesis}
\PYG{+w}{            }\PYG{k}{while}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{stack}\PYG{p}{.}\PYG{n}{size}\PYG{p}{()}\PYG{+w}{ }\PYG{o}{\PYGZam{}\PYGZam{}}\PYG{+w}{ }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{top}\PYG{p}{()}\PYG{+w}{ }\PYG{o}{!=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}(\PYGZsq{}}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{n}{postfix}\PYG{o}{+=}\PYG{n}{stack}\PYG{p}{.}\PYG{n}{top}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Append the character on the top of the stack to the return string}
\PYG{+w}{                }\PYG{n}{postfix}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{} \PYGZsq{}}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Tack on a space}
\PYG{+w}{                }\PYG{n}{stack}\PYG{p}{.}\PYG{n}{pop}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Pop the stack}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\end{Verbatim}
