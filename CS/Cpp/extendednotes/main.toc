\contentsline {section}{\numberline {1}STL Containers}{9}{section.0.1}%
\contentsline {subsection}{\numberline {1.1}STL Vectors}{9}{subsection.0.1.1}%
\contentsline {subsubsection}{\numberline {1.1.1}Implementation}{9}{subsubsection.0.1.1.1}%
\contentsline {subsubsection}{\numberline {1.1.2}Performance in operations on the end}{9}{subsubsection.0.1.1.2}%
\contentsline {subsubsection}{\numberline {1.1.3}Size and capacity}{9}{subsubsection.0.1.1.3}%
\contentsline {subsubsection}{\numberline {1.1.4}Constructors}{10}{subsubsection.0.1.1.4}%
\contentsline {subsubsection}{\numberline {1.1.5}Note about at()}{11}{subsubsection.0.1.1.5}%
\contentsline {subsubsection}{\numberline {1.1.6}Iterator methods}{11}{subsubsection.0.1.1.6}%
\contentsline {subsubsection}{\numberline {1.1.7}Using vectors as 2d arrays}{11}{subsubsection.0.1.1.7}%
\contentsline {subsubsection}{\numberline {1.1.8}For those interested}{13}{subsubsection.0.1.1.8}%
\contentsline {paragraph}{\numberline {1.1.8.1}Manual Dynamic Memory Allocation (Using new)}{13}{paragraph.0.1.1.8.1}%
\contentsline {paragraph}{\numberline {1.1.8.2}Using unique pointer}{13}{paragraph.0.1.1.8.2}%
\contentsline {paragraph}{\numberline {1.1.8.3}Recall: Unique pointer for dynamic arry}{14}{paragraph.0.1.1.8.3}%
\contentsline {paragraph}{\numberline {1.1.8.4}If sizes are truly known at compile time}{15}{paragraph.0.1.1.8.4}%
\contentsline {subsection}{\numberline {1.2}STL Deque}{16}{subsection.0.1.2}%
\contentsline {subsubsection}{\numberline {1.2.1}Implementation}{16}{subsubsection.0.1.2.1}%
\contentsline {subsubsection}{\numberline {1.2.2}Abilities, performance, uses}{16}{subsubsection.0.1.2.2}%
\contentsline {subsubsection}{\numberline {1.2.3}When to use deques}{16}{subsubsection.0.1.2.3}%
\contentsline {subsubsection}{\numberline {1.2.4}Constructors}{17}{subsubsection.0.1.2.4}%
\contentsline {subsection}{\numberline {1.3}STL Lists}{18}{subsection.0.1.3}%
\contentsline {subsubsection}{\numberline {1.3.1}Implementation}{18}{subsubsection.0.1.3.1}%
\contentsline {subsubsection}{\numberline {1.3.2}Abilities}{18}{subsubsection.0.1.3.2}%
\contentsline {subsubsection}{\numberline {1.3.3}Differencs in the methods}{18}{subsubsection.0.1.3.3}%
\contentsline {subsubsection}{\numberline {1.3.4}Constructors}{19}{subsubsection.0.1.3.4}%
\contentsline {subsubsection}{\numberline {1.3.5}Element access}{19}{subsubsection.0.1.3.5}%
\contentsline {subsubsection}{\numberline {1.3.6}Iterator functions}{19}{subsubsection.0.1.3.6}%
\contentsline {subsubsection}{\numberline {1.3.7}Splice Functions and Functions to Change the Order of Elements}{20}{subsubsection.0.1.3.7}%
\contentsline {subsection}{\numberline {1.4}STL Forward lists}{21}{subsection.0.1.4}%
\contentsline {subsubsection}{\numberline {1.4.1}Implementation}{21}{subsubsection.0.1.4.1}%
\contentsline {subsubsection}{\numberline {1.4.2}Abilities, limitations}{21}{subsubsection.0.1.4.2}%
\contentsline {subsubsection}{\numberline {1.4.3}No size()?}{22}{subsubsection.0.1.4.3}%
\contentsline {subsubsection}{\numberline {1.4.4}Similarities to list}{22}{subsubsection.0.1.4.4}%
\contentsline {subsubsection}{\numberline {1.4.5}Constructors}{23}{subsubsection.0.1.4.5}%
\contentsline {subsection}{\numberline {1.5}STL Sets and multisets}{24}{subsection.0.1.5}%
\contentsline {subsubsection}{\numberline {1.5.1}Implementation}{24}{subsubsection.0.1.5.1}%
\contentsline {subsubsection}{\numberline {1.5.2}Strict weak ordering}{24}{subsubsection.0.1.5.2}%
\contentsline {subsubsection}{\numberline {1.5.3}Abilities}{25}{subsubsection.0.1.5.3}%
\contentsline {subsubsection}{\numberline {1.5.4}Changing elements directly, no direct element access}{25}{subsubsection.0.1.5.4}%
\contentsline {subsubsection}{\numberline {1.5.5}Constructors}{25}{subsubsection.0.1.5.5}%
\contentsline {subsubsection}{\numberline {1.5.6}Types}{26}{subsubsection.0.1.5.6}%
\contentsline {subsubsection}{\numberline {1.5.7}Constructors}{27}{subsubsection.0.1.5.7}%
\contentsline {subsection}{\numberline {1.6}STL Maps and multimaps}{28}{subsection.0.1.6}%
\contentsline {subsubsection}{\numberline {1.6.1}Implementation}{28}{subsubsection.0.1.6.1}%
\contentsline {subsubsection}{\numberline {1.6.2}Template parameters}{28}{subsubsection.0.1.6.2}%
\contentsline {subsubsection}{\numberline {1.6.3}Abilities}{28}{subsubsection.0.1.6.3}%
\contentsline {subsubsection}{\numberline {1.6.4}Constructors and types}{29}{subsubsection.0.1.6.4}%
\contentsline {subsubsection}{\numberline {1.6.5}Using maps as associative arrays}{30}{subsubsection.0.1.6.5}%
\contentsline {subsubsection}{\numberline {1.6.6}Constructors}{30}{subsubsection.0.1.6.6}%
\contentsline {subsection}{\numberline {1.7}Example of bounds and equal range}{32}{subsection.0.1.7}%
\contentsline {subsection}{\numberline {1.8}STL Unordered containers}{33}{subsection.0.1.8}%
\contentsline {subsubsection}{\numberline {1.8.1}Implementation}{33}{subsubsection.0.1.8.1}%
\contentsline {subsubsection}{\numberline {1.8.2}Abilities}{33}{subsubsection.0.1.8.2}%
\contentsline {subsubsection}{\numberline {1.8.3}Disadvantages}{34}{subsubsection.0.1.8.3}%
\contentsline {subsection}{\numberline {1.9}STL Containers: Implementations}{35}{subsection.0.1.9}%
\contentsline {subsection}{\numberline {1.10}STL Containers: Iterator Functions}{36}{subsection.0.1.10}%
\contentsline {subsection}{\numberline {1.11}STL containers: Main concepts, differences, uses}{37}{subsection.0.1.11}%
\contentsline {subsection}{\numberline {1.12}STL Containers: Iterator invalidation}{39}{subsection.0.1.12}%
\contentsline {subsection}{\numberline {1.13}STL Containers: Reallocation}{40}{subsection.0.1.13}%
\contentsline {subsection}{\numberline {1.14}STL Containers: Element access}{41}{subsection.0.1.14}%
\contentsline {subsection}{\numberline {1.15}STL Containers: Uses and advantages}{42}{subsection.0.1.15}%
\contentsline {subsection}{\numberline {1.16}STL Iterators}{43}{subsection.0.1.16}%
\contentsline {subsection}{\numberline {1.17}Complexity of container operations}{47}{subsection.0.1.17}%
\contentsline {section}{\numberline {2}STL Algorithms}{48}{section.0.2}%
\contentsline {subsection}{\numberline {2.1}<algorithm>}{48}{subsection.0.2.1}%
\contentsline {subsection}{\numberline {2.2}<numeric>}{49}{subsection.0.2.2}%
\contentsline {subsubsection}{\numberline {2.2.1}transform\_reduce}{49}{subsubsection.0.2.2.1}%
\contentsline {paragraph}{\numberline {2.2.1.1}Unary transform and reduce}{49}{paragraph.0.2.2.1.1}%
\contentsline {paragraph}{\numberline {2.2.1.2}Binary transform and reduce}{50}{paragraph.0.2.2.1.2}%
\contentsline {paragraph}{\numberline {2.2.1.3}std::plus<> and std::multiplies<>}{51}{paragraph.0.2.2.1.3}%
\contentsline {paragraph}{\numberline {2.2.1.4}Other key function objects}{51}{paragraph.0.2.2.1.4}%
\contentsline {section}{\numberline {3}Labels and goto}{53}{section.0.3}%
\contentsline {section}{\numberline {4}Type traits}{54}{section.0.4}%
\contentsline {subsection}{\numberline {4.1}Nonstandard type of types}{54}{subsection.0.4.1}%
\contentsline {subsection}{\numberline {4.2}::value, ::type, and ::value\_type}{55}{subsection.0.4.2}%
\contentsline {section}{\numberline {5}Function Objects}{56}{section.0.5}%
\contentsline {paragraph}{\numberline {5.0.0.1}Why?}{56}{paragraph.0.5.0.0.1}%
\contentsline {paragraph}{\numberline {5.0.0.2}Predefined function objects}{57}{paragraph.0.5.0.0.2}%
\contentsline {section}{\numberline {6}Decltype}{57}{section.0.6}%
\contentsline {subsection}{\numberline {6.1}Syntax}{57}{subsection.0.6.1}%
\contentsline {subsection}{\numberline {6.2}Example}{58}{subsection.0.6.2}%
\contentsline {subsection}{\numberline {6.3}Things to pair with decltype}{58}{subsection.0.6.3}%
\contentsline {section}{\numberline {7}Constexpr}{59}{section.0.7}%
\contentsline {subsection}{\numberline {7.1}Variables}{59}{subsection.0.7.1}%
\contentsline {subsection}{\numberline {7.2}Functions}{59}{subsection.0.7.2}%
\contentsline {subsection}{\numberline {7.3}Object Constructors}{60}{subsection.0.7.3}%
\contentsline {subsection}{\numberline {7.4}constexpr vs const}{60}{subsection.0.7.4}%
\contentsline {section}{\numberline {8}Function pointers and callable parametrs}{61}{section.0.8}%
\contentsline {subsection}{\numberline {8.1}Function pointers}{61}{subsection.0.8.1}%
\contentsline {subsubsection}{\numberline {8.1.1}As types}{61}{subsubsection.0.8.1.1}%
\contentsline {subsubsection}{\numberline {8.1.2}As function paramater}{61}{subsubsection.0.8.1.2}%
\contentsline {subsubsection}{\numberline {8.1.3}Function pointers to member functions}{62}{subsubsection.0.8.1.3}%
\contentsline {subsection}{\numberline {8.2}Using std::function}{63}{subsection.0.8.2}%
\contentsline {subsection}{\numberline {8.3}With forwarding references}{63}{subsection.0.8.3}%
\contentsline {section}{\numberline {9}Templates}{64}{section.0.9}%
\contentsline {subsection}{\numberline {9.1}Template Function}{64}{subsection.0.9.1}%
\contentsline {subsection}{\numberline {9.2}Template Class}{65}{subsection.0.9.2}%
\contentsline {subsection}{\numberline {9.3}Class vs typename keyword}{65}{subsection.0.9.3}%
\contentsline {subsection}{\numberline {9.4}Handle friend functions}{65}{subsection.0.9.4}%
\contentsline {subsubsection}{\numberline {9.4.1}Friendship to a Non-Template Function}{65}{subsubsection.0.9.4.1}%
\contentsline {subsubsection}{\numberline {9.4.2}Friendship to a Template Function}{66}{subsubsection.0.9.4.2}%
\contentsline {subsection}{\numberline {9.5}Function Template Specialization}{68}{subsection.0.9.5}%
\contentsline {subsection}{\numberline {9.6}Class/Struct Template Specialization}{68}{subsection.0.9.6}%
\contentsline {subsection}{\numberline {9.7}Template Parameters}{68}{subsection.0.9.7}%
\contentsline {subsection}{\numberline {9.8}Trailing return type}{68}{subsection.0.9.8}%
\contentsline {subsubsection}{\numberline {9.8.1}Syntax}{69}{subsubsection.0.9.8.1}%
\contentsline {subsubsection}{\numberline {9.8.2}Example}{69}{subsubsection.0.9.8.2}%
\contentsline {subsection}{\numberline {9.9}Template functions with mixed types (Trailing return type)}{69}{subsection.0.9.9}%
\contentsline {subsection}{\numberline {9.10}Template functions with mixed types (Deduced return type)}{70}{subsection.0.9.10}%
\contentsline {subsection}{\numberline {9.11}Dependent name resolution}{70}{subsection.0.9.11}%
\contentsline {subsubsection}{\numberline {9.11.1}Dependent names}{70}{subsubsection.0.9.11.1}%
\contentsline {subsubsection}{\numberline {9.11.2}Typename Keyword}{70}{subsubsection.0.9.11.2}%
\contentsline {subsubsection}{\numberline {9.11.3}Nested types}{71}{subsubsection.0.9.11.3}%
\contentsline {subsubsection}{\numberline {9.11.4}Prereq: Using aliases defined in classes}{71}{subsubsection.0.9.11.4}%
\contentsline {subsubsection}{\numberline {9.11.5}Type Aliases}{72}{subsubsection.0.9.11.5}%
\contentsline {subsubsection}{\numberline {9.11.6}Return Types in Template Functions}{73}{subsubsection.0.9.11.6}%
\contentsline {subsubsection}{\numberline {9.11.7}Base Class Members}{73}{subsubsection.0.9.11.7}%
\contentsline {subsubsection}{\numberline {9.11.8}Dependent Types in Expressions}{73}{subsubsection.0.9.11.8}%
\contentsline {subsection}{\numberline {9.12}Variadic templates with functions}{73}{subsection.0.9.12}%
\contentsline {subsection}{\numberline {9.13}Left vs right folds}{77}{subsection.0.9.13}%
\contentsline {subsection}{\numberline {9.14}Parentheses in fold expressions}{78}{subsection.0.9.14}%
\contentsline {subsection}{\numberline {9.15}Pack size}{78}{subsection.0.9.15}%
\contentsline {subsection}{\numberline {9.16}Function calls in fold expressions}{79}{subsection.0.9.16}%
\contentsline {subsection}{\numberline {9.17}Variadic templates with classes}{80}{subsection.0.9.17}%
\contentsline {subsection}{\numberline {9.18}std::forward}{82}{subsection.0.9.18}%
\contentsline {subsubsection}{\numberline {9.18.1}Key Differences Between std::forward and std::move}{82}{subsubsection.0.9.18.1}%
\contentsline {subsection}{\numberline {9.19}Universal reference (forwarding reference)}{84}{subsection.0.9.19}%
\contentsline {section}{\numberline {10}More on the comma operator}{85}{section.0.10}%
\contentsline {section}{\numberline {11}More on Lambdas}{86}{section.0.11}%
\contentsline {subsection}{\numberline {11.1}Auto in lambda args}{86}{subsection.0.11.1}%
\contentsline {subsection}{\numberline {11.2}Template lambdas}{86}{subsection.0.11.2}%
\contentsline {subsection}{\numberline {11.3}Recursive lambdas}{87}{subsection.0.11.3}%
\contentsline {section}{\numberline {12}When initializer lists are required}{88}{section.0.12}%
\contentsline {section}{\numberline {13}Inheritence and Subtype Polymorphism}{89}{section.0.13}%
\contentsline {subsection}{\numberline {13.1}OOP Main Concepts}{89}{subsection.0.13.1}%
\contentsline {subsection}{\numberline {13.2}Object Relationships}{89}{subsection.0.13.2}%
\contentsline {subsection}{\numberline {13.3}Ineritance}{90}{subsection.0.13.3}%
\contentsline {subsection}{\numberline {13.4}Inheritance and Member Access}{90}{subsection.0.13.4}%
\contentsline {subsection}{\numberline {13.5}Inheritance Syntax}{91}{subsection.0.13.5}%
\contentsline {subsection}{\numberline {13.6}Upcasting and Downcasting}{92}{subsection.0.13.6}%
\contentsline {subsection}{\numberline {13.7}More on Downcasting}{93}{subsection.0.13.7}%
\contentsline {subsubsection}{\numberline {13.7.1}What Happens Without Virtual Functions}{94}{subsubsection.0.13.7.1}%
\contentsline {subsubsection}{\numberline {13.7.2}Downcasting example}{95}{subsubsection.0.13.7.2}%
\contentsline {subsubsection}{\numberline {13.7.3}Base class pointer example}{96}{subsubsection.0.13.7.3}%
\contentsline {subsection}{\numberline {13.8}Object Slicing}{96}{subsection.0.13.8}%
\contentsline {subsection}{\numberline {13.9}Multiple Inheritance}{98}{subsection.0.13.9}%
\contentsline {subsubsection}{\numberline {13.9.1}Why Use Multiple Inheritance?}{98}{subsubsection.0.13.9.1}%
\contentsline {subsubsection}{\numberline {13.9.2}Example}{98}{subsubsection.0.13.9.2}%
\contentsline {subsubsection}{\numberline {13.9.3}Issues with Multiple Inheritance}{99}{subsubsection.0.13.9.3}%
\contentsline {subsection}{\numberline {13.10}Virtual inheritance}{100}{subsection.0.13.10}%
\contentsline {subsubsection}{\numberline {13.10.1}The Diamond Problem}{100}{subsubsection.0.13.10.1}%
\contentsline {subsubsection}{\numberline {13.10.2}Solution with Virtual Inheritance}{101}{subsubsection.0.13.10.2}%
\contentsline {subsection}{\numberline {13.11}Subtype Polymorphism}{101}{subsection.0.13.11}%
\contentsline {subsection}{\numberline {13.12}Declaring Virtual Member Functions}{102}{subsection.0.13.12}%
\contentsline {subsubsection}{\numberline {13.12.1}The override keyword}{102}{subsubsection.0.13.12.1}%
\contentsline {subsection}{\numberline {13.13}Abstract or Pure virtual Member Functions}{103}{subsection.0.13.13}%
\contentsline {subsection}{\numberline {13.14}Abstract Classes}{103}{subsection.0.13.14}%
\contentsline {subsection}{\numberline {13.15}Interface Inheritance}{104}{subsection.0.13.15}%
\contentsline {section}{\numberline {14}<regex.h> Pattern Matching and String Validation}{105}{section.0.14}%
\contentsline {subsection}{\numberline {14.1}regcomp}{105}{subsection.0.14.1}%
\contentsline {subsubsection}{\numberline {14.1.1}Signature}{105}{subsubsection.0.14.1.1}%
\contentsline {subsubsection}{\numberline {14.1.2}Return value}{105}{subsubsection.0.14.1.2}%
\contentsline {subsubsection}{\numberline {14.1.3}Return errors}{105}{subsubsection.0.14.1.3}%
\contentsline {subsubsection}{\numberline {14.1.4}Flags}{106}{subsubsection.0.14.1.4}%
\contentsline {subsection}{\numberline {14.2}Regexec}{106}{subsection.0.14.2}%
\contentsline {subsubsection}{\numberline {14.2.1}Signature}{107}{subsubsection.0.14.2.1}%
\contentsline {subsubsection}{\numberline {14.2.2}Return value}{107}{subsubsection.0.14.2.2}%
\contentsline {subsection}{\numberline {14.3}Regerror}{107}{subsection.0.14.3}%
\contentsline {subsubsection}{\numberline {14.3.1}Signature}{107}{subsubsection.0.14.3.1}%
\contentsline {subsubsection}{\numberline {14.3.2}Return value}{108}{subsubsection.0.14.3.2}%
\contentsline {subsection}{\numberline {14.4}Regfree}{108}{subsection.0.14.4}%
\contentsline {subsubsection}{\numberline {14.4.1}Signature}{108}{subsubsection.0.14.4.1}%
\contentsline {subsection}{\numberline {14.5}regmatch\_t and pmatch}{109}{subsection.0.14.5}%
\contentsline {subsubsection}{\numberline {14.5.1}regmatch\_t}{109}{subsubsection.0.14.5.1}%
\contentsline {subsubsection}{\numberline {14.5.2}pmatch array}{110}{subsubsection.0.14.5.2}%
\contentsline {subsection}{\numberline {14.6}Regex Example}{110}{subsection.0.14.6}%
\contentsline {section}{\numberline {15}Structured bindings}{113}{section.0.15}%
\contentsline {subsection}{\numberline {15.1}As unpacks}{113}{subsection.0.15.1}%
\contentsline {subsection}{\numberline {15.2}With returning}{113}{subsection.0.15.2}%
\contentsline {subsection}{\numberline {15.3}With structs and classes}{114}{subsection.0.15.3}%
\contentsline {subsection}{\numberline {15.4}With maps}{114}{subsection.0.15.4}%
\contentsline {section}{\numberline {16}Attributes in c++}{115}{section.0.16}%
\contentsline {subsection}{\numberline {16.1}General Attributes}{115}{subsection.0.16.1}%
\contentsline {section}{\numberline {17}Inline functions}{118}{section.0.17}%
\contentsline {section}{\numberline {18}Advanced iterator usage}{119}{section.0.18}%
\contentsline {subsection}{\numberline {18.1}base()}{119}{subsection.0.18.1}%
\contentsline {section}{\numberline {19}Regular expressions in c++}{120}{section.0.19}%
\contentsline {subsection}{\numberline {19.1}Basic components}{120}{subsection.0.19.1}%
\contentsline {subsubsection}{\numberline {19.1.1}The regex object}{120}{subsubsection.0.19.1.1}%
\contentsline {subsubsection}{\numberline {19.1.2}The smatch array}{120}{subsubsection.0.19.1.2}%
\contentsline {subsubsection}{\numberline {19.1.3}regex\_match}{121}{subsubsection.0.19.1.3}%
\contentsline {subsubsection}{\numberline {19.1.4}regex\_search}{121}{subsubsection.0.19.1.4}%
\contentsline {subsubsection}{\numberline {19.1.5}regex\_replace}{123}{subsubsection.0.19.1.5}%
\contentsline {subsection}{\numberline {19.2}match\_results}{123}{subsection.0.19.2}%
\contentsline {subsubsection}{\numberline {19.2.1}Methods}{123}{subsubsection.0.19.2.1}%
\contentsline {subsection}{\numberline {19.3}sub\_match}{124}{subsection.0.19.3}%
\contentsline {subsection}{\numberline {19.4}Passing string iterators}{125}{subsection.0.19.4}%
\contentsline {subsubsection}{\numberline {19.4.1}Getting all matches}{125}{subsubsection.0.19.4.1}%
\contentsline {subsection}{\numberline {19.5}smatch prefix and suffix}{126}{subsection.0.19.5}%
\contentsline {section}{\numberline {20}Standard namespace}{128}{section.0.20}%
\contentsline {subsection}{\numberline {20.1}std::bind}{128}{subsection.0.20.1}%
\contentsline {subsubsection}{\numberline {20.1.1}std::placeholders}{128}{subsubsection.0.20.1.1}%
\contentsline {subsubsection}{\numberline {20.1.2}Using std::ref with bind}{129}{subsubsection.0.20.1.2}%
\contentsline {subsection}{\numberline {20.2}std::invoke}{130}{subsection.0.20.2}%
\contentsline {subsubsection}{\numberline {20.2.1}Calling a regular function}{130}{subsubsection.0.20.2.1}%
\contentsline {subsubsection}{\numberline {20.2.2}Calling a member function}{130}{subsubsection.0.20.2.2}%
\contentsline {subsubsection}{\numberline {20.2.3}Accessing a member variable}{131}{subsubsection.0.20.2.3}%
\contentsline {subsubsection}{\numberline {20.2.4}Calling a lambda}{131}{subsubsection.0.20.2.4}%
\contentsline {subsection}{\numberline {20.3}std::exchange}{132}{subsection.0.20.3}%
\contentsline {subsection}{\numberline {20.4}std::swap}{133}{subsection.0.20.4}%
\contentsline {subsection}{\numberline {20.5}std::get}{134}{subsection.0.20.5}%
\contentsline {subsection}{\numberline {20.6}std::tuple}{135}{subsection.0.20.6}%
\contentsline {subsubsection}{\numberline {20.6.1}std::tuple and std::make\_tuple}{135}{subsubsection.0.20.6.1}%
\contentsline {subsubsection}{\numberline {20.6.2}Modifying elements}{135}{subsubsection.0.20.6.2}%
\contentsline {subsubsection}{\numberline {20.6.3}std::tuple\_size}{135}{subsubsection.0.20.6.3}%
\contentsline {subsubsection}{\numberline {20.6.4}Unpacking with std::tie}{136}{subsubsection.0.20.6.4}%
\contentsline {subsubsection}{\numberline {20.6.5}std::tie with std::ignore}{136}{subsubsection.0.20.6.5}%
