Loading graph from file "input/topo1.graph"
Found 7 vertices:
  vertex index=0, label=a
  vertex index=1, label=b
  vertex index=2, label=c
  vertex index=3, label=d
  vertex index=4, label=e
  vertex index=5, label=f
  vertex index=6, label=g

Found 8 edges:
  edge origin=a(0), dest=b(1), weight=1
  edge origin=a(0), dest=d(3), weight=1
  edge origin=b(1), dest=c(2), weight=1
  edge origin=b(1), dest=e(4), weight=1
  edge origin=d(3), dest=e(4), weight=1
  edge origin=e(4), dest=c(2), weight=1
  edge origin=e(4), dest=f(5), weight=1
  edge origin=g(6), dest=d(3), weight=1

  g.nvertices() = 7
  g.nedges() = 8
  Printing undirected adjacency list:
    0, label=a, index=0: [b(1):1] [d(3):1] 
    1, label=b, index=1: [a(0):1] [c(2):1] [e(4):1] 
    2, label=c, index=2: [b(1):1] [e(4):1] 
    3, label=d, index=3: [a(0):1] [e(4):1] [g(6):1] 
    4, label=e, index=4: [b(1):1] [d(3):1] [c(2):1] [f(5):1] 
    5, label=f, index=5: [e(4):1] 
    6, label=g, index=6: [d(3):1] 

  Printing out-adjacency list:
    0, label=a, index=0: [b(1):1] [d(3):1] 
    1, label=b, index=1: [c(2):1] [e(4):1] 
    2, label=c, index=2: 
    3, label=d, index=3: [e(4):1] 
    4, label=e, index=4: [c(2):1] [f(5):1] 
    5, label=f, index=5: 
    6, label=g, index=6: [d(3):1] 

  Printing in-adjacency list:
    0, label=a, index=0: 
    1, label=b, index=1: [a(0):1] 
    2, label=c, index=2: [b(1):1] [e(4):1] 
    3, label=d, index=3: [a(0):1] [g(6):1] 
    4, label=e, index=4: [b(1):1] [d(3):1] 
    5, label=f, index=5: [e(4):1] 
    6, label=g, index=6: 

  Unweighted Adjacency Matrix
  0 1 0 1 0 0 0 
  0 0 1 0 1 0 0 
  0 0 0 0 0 0 0 
  0 0 0 0 1 0 0 
  0 0 1 0 0 1 0 
  0 0 0 0 0 0 0 
  0 0 0 1 0 0 0 

  Weighted Adjacency Matrix
    inf     1   inf     1   inf   inf   inf 
    inf   inf     1   inf     1   inf   inf 
    inf   inf   inf   inf   inf   inf   inf 
    inf   inf   inf   inf     1   inf   inf 
    inf   inf     1   inf   inf     1   inf 
    inf   inf   inf   inf   inf   inf   inf 
    inf   inf   inf     1   inf   inf   inf 

  Depth first (connected only): [a(0)] [b(1)] [c(2)] [e(4)] [f(5)] [d(3)] 
  Depth first traversal (all):  [a(0)] [b(1)] [c(2)] [e(4)] [f(5)] [d(3)] [g(6)] 

  Breadth first (connected only): [a(0)] [b(1)] [d(3)] [c(2)] [e(4)] [f(5)] 
  Breadth first traversal (all):  [a(0)] [b(1)] [d(3)] [c(2)] [e(4)] [f(5)] [g(6)] 

  Topological sort: [a(0)] [b(1)] [g(6)] [d(3)] [e(4)] [c(2)] [f(5)] 

Dijkstra's Shortest Path from source a(0)
  node=a(0), distance = 0
  node=b(1), distance = 1, from vertex a(0)
  node=c(2), distance = 2, from vertex b(1)
  node=d(3), distance = 1, from vertex a(0)
  node=e(4), distance = 2, from vertex b(1)
  node=f(5), distance = 3, from vertex e(4)
  node=g(6), distance =inf

Dijkstra's Shortest Path from source b(1)
  node=a(0), distance =inf
  node=b(1), distance = 0
  node=c(2), distance = 1, from vertex b(1)
  node=d(3), distance =inf
  node=e(4), distance = 1, from vertex b(1)
  node=f(5), distance = 2, from vertex e(4)
  node=g(6), distance =inf

Dijkstra's Shortest Path from source c(2)
  node=a(0), distance =inf
  node=b(1), distance =inf
  node=c(2), distance = 0
  node=d(3), distance =inf
  node=e(4), distance =inf
  node=f(5), distance =inf
  node=g(6), distance =inf

Dijkstra's Shortest Path from source d(3)
  node=a(0), distance =inf
  node=b(1), distance =inf
  node=c(2), distance = 2, from vertex e(4)
  node=d(3), distance = 0
  node=e(4), distance = 1, from vertex d(3)
  node=f(5), distance = 2, from vertex e(4)
  node=g(6), distance =inf

Dijkstra's Shortest Path from source e(4)
  node=a(0), distance =inf
  node=b(1), distance =inf
  node=c(2), distance = 1, from vertex e(4)
  node=d(3), distance =inf
  node=e(4), distance = 0
  node=f(5), distance = 1, from vertex e(4)
  node=g(6), distance =inf

Dijkstra's Shortest Path from source f(5)
  node=a(0), distance =inf
  node=b(1), distance =inf
  node=c(2), distance =inf
  node=d(3), distance =inf
  node=e(4), distance =inf
  node=f(5), distance = 0
  node=g(6), distance =inf

Dijkstra's Shortest Path from source g(6)
  node=a(0), distance =inf
  node=b(1), distance =inf
  node=c(2), distance = 3, from vertex e(4)
  node=d(3), distance = 1, from vertex g(6)
  node=e(4), distance = 2, from vertex d(3)
  node=f(5), distance = 3, from vertex e(4)
  node=g(6), distance = 0

